{
	"title": "Rowan Manning's blog",
	"hash": "6769a7aac9914f98016cb5d26eef1939",
	"url": "https://sample-feeds.rowanmanning.com/real-world/6769a7aac9914f98016cb5d26eef1939/feed.xml",
	"feed": {
		"meta": {
			"type": "atom",
			"version": "1.0"
		},
		"language": "en-gb",
		"title": "Rowan’s Blog | Rowan Manning",
		"description": null,
		"copyright": "Copyright © 2024, Rowan Manning",
		"url": "https://rowanmanning.com/posts/",
		"self": "https://sample-feeds.rowanmanning.com/real-world/6769a7aac9914f98016cb5d26eef1939/feed.xml",
		"published": null,
		"updated": "2022-11-04T11:22:00.000Z",
		"generator": {
			"label": "Hugo",
			"version": "0.101.0",
			"url": "https://gohugo.io/"
		},
		"image": null,
		"authors": [
			{
				"name": "Rowan Manning",
				"email": null,
				"url": "https://rowanmanning.com/"
			}
		],
		"categories": [],
		"items": [
			{
				"id": "https://rowanmanning.com/posts/operational-excellence-one-year-on/",
				"title": "Operational excellence: one year on",
				"description": null,
				"url": "https://rowanmanning.com/posts/operational-excellence-one-year-on/",
				"published": "2022-11-04T11:22:00.000Z",
				"updated": "2022-11-04T11:22:00.000Z",
				"content": "<p>A year ago, <a href=\"https://medium.com/ft-product-technology/next-chapter-on-our-journey-to-achieve-and-maintain-operational-excellence-of-ft-com-7dd9c7871347\">Nayana wrote a blog post</a> outlining some changes to the way we support FT.com. As well as giving an excellent overview of what our “OpsCop” team did, it set out some changes that we intended to make. We wanted to stop being reactive and start <em>proactively</em> finding ways to enable operational excellence on FT.com.</p>\n<p>I’ve been working on the new team for about a year and I think the change in focus has been a huge success. We are now a team of three permanent senior engineers, a technical product manager, and a delivery manager. We recently renamed ourselves to the Reliability Team to better reflect the long-term vision of the team, our expertise, and our changing role in the organisation.</p>\n<h2 id=\"how-the-team-works\">How the team works</h2>\n<h3 id=\"we-still-triage-issues\">We still triage issues</h3>\n<p>We’re still the team responsible for triaging issues that come into FT.com, however, this is now only a small part of what we do. Nayana said in her original post:</p>\n<blockquote>\n<p>“Our vision is to get to a place where the ft.com team in partnership with the stream-aligned product teams and the platform team spend 90% of their time improving the overall reliability aspects of ft.com and only spend 10% of their time on triaging issues that the group has never seen before.”</p>\n</blockquote>\n<p>We’ve met Nayana’s original target, dropping from <strong>~90%</strong> to <strong>~10%</strong> of our time spent on triage. Lower-severity issues now get sent directly to the owner of the system without ever reaching our team, this gives us space to focus on more critical underlying issues.</p>\n<p>There’s definitely <a href=\"https://sre.google/sre-book/eliminating-toil/\">less toil</a> than there used to be, and we’re focused more on actionable outcomes of an incident. A recent example is the FT.com site navigation going down and managing to take out several applications. We identified the root cause as well as some other improvements we could make to increase the resilience of this service. We spent a week <a href=\"https://en.wikipedia.org/wiki/Mob_programming\">mobbing</a> with the team who own this system, increased knowledge of how it fits into our other systems, and fixed some fairly critical issues. Previously we would not have had the capacity to make those underlying changes, especially in such a short period of time.</p>\n<p>Another thing that we’re now doing with our issue triage is trying to spot patterns over time. For example, in early 2022 we were seeing quite a few issues related to our membership services. On the customer-facing website, these are presented as error pages, and our customer care team would often bring these issues directly to us. Rather than continue to react to these issues when they came up, we built some tools to help us quickly identify and route these issues to the team responsible for billing and subscribers.</p>\n<h3 id=\"we-proactively-seek-out-potential-issues\">We proactively seek out potential issues</h3>\n<p>A key point made in Nayana’s original post was around being proactive rather than reactive.</p>\n<blockquote>\n<p>“We believe that this would help <strong>reduce the reactive operational work</strong> that teams have to do giving us more time as a group to focus on the <strong>proactive, preventive and predictive maintenance</strong> of ft.com systems and services.”</p>\n</blockquote>\n<p>This is something that we’ve made a clear focus over the last year, as the reactive approach was not scalable: more FT subscribers lead to more issues and support requests, which then require more engineering effort.</p>\n<p>We all had some assumptions about which parts of the FT.com stack were less-than-reliable because we’ve always had relatively good monitoring. What we didn’t know was the <em>why</em>; whether there were any common issues we see across all of our systems.</p>\n<p>We did a lot of investigating: picking apart our error logs to look for patterns, digging into the code for different systems to find common issues, reviewing the root causes of incidents to see if there are any shortfalls in the way we design software. We did some deep dives into one or two of our more problematic systems and wrote down everything we found. This put us in a good position to make recommendations to our teams, and we’ve been rolling out some changes based on this research.</p>\n<h3 id=\"we-own-code-and-systems\">We own code and systems</h3>\n<p>We gave ourselves a few months’ grace period for the team to bed in, but then we started taking ownership of all the libraries and systems related to the reliability and stability of FT.com. This gave us the ability to make improvements without relying on other teams and also took the pressure off some of the product teams who just don’t have as much time to focus on this area.</p>\n<p>We’re still slowly ramping up but we’re now at 16 repos, all of which we understand well enough to reliably support.</p>\n<p>As well as taking ownership of existing code, we’ve also been looking at how we can produce new software to improve FT.com’s reliability. After identifying some areas we could clearly improve, we released <a href=\"https://github.com/Financial-Times/dotcom-reliability-kit#readme\">Reliability Kit</a>, a suite of Node.js libraries and guides that will help us standardise errors and logging. We’re slowly migrating our applications to this. It’s an area we previously under-invested in and we’re already seeing some big improvements to the observability and reliability of the systems which have adopted it.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"/posts/operational-excellence-one-year-on/reliability-kit-error.jpg\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/operational-excellence-one-year-on/reliability-kit-error_hu00da04ed0eb8646d73e7650ca68172b5_127860_720x0_resize_q75_box.jpg,\n\t\t\t\t\thttps://rowanmanning.com/posts/operational-excellence-one-year-on/reliability-kit-error.jpg 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/operational-excellence-one-year-on/reliability-kit-error.jpg 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/operational-excellence-one-year-on/reliability-kit-error.jpg\"\n\t\t\talt=\"A JSON-based error log containing app details (e.g. commit hash, name, Node.js version) and error information (e.g. message, code, stack trace, and related systems)\"\n\t\t\twidth=\"1070\"\n\t\t\theight=\"1094\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n\t\t<figcaption class=\"image__caption\">An example of the improved error logging we’ve rolled out with Reliability Kit</figcaption>\n\t\n</figure>\n\n<h2 id=\"are-we-solving-the-problems-of-one-year-ago\">Are we solving the problems of one year ago?</h2>\n<p>Nayana highlighted several key issues in her original blog post.</p>\n<h3 id=\"no-metrics-and-service-level-agreements-for-incoming-issues\">No metrics and Service Level Agreements for incoming issues</h3>\n<p>We’re on our way to solving this; we’re definitely focused on reducing recurring issues and we have a better process for fixing incoming issues. We haven’t <em>quite</em> got there with SLAs (service level agreements) but some work has been done on adding SLOs (service level objectives) for systems.</p>\n<h3 id=\"some-large-operational-issues-without-a-clear-owner-to-drive-strategic-changes\">Some large operational issues without a clear owner to drive strategic changes</h3>\n<p>As discussed already, we’re now investigating the broader operational issues that impact FT.com and owning the work to address them. We’re able to focus on some large technical challenges that previously wouldn’t have been possible.</p>\n<h3 id=\"no-systematic-process-for-creating-a-shared-sense-of-ownership-across-ftcom\">No systematic process for creating a shared sense of ownership across ft.com</h3>\n<p>We don’t yet have a systematic process, but we’re going to investigate supporting engineers seconding into our team. We’re also very open and visible in the work we’re doing — we’re sharing regular internal blog posts, design docs, and the results of our investigations.</p>\n<h2 id=\"what-are-the-new-problems\">What are the new problems?</h2>\n<p>A year is a long time in software development, and we’re always identifying new problems to solve. These will help us decide what the team should be doing going forward.</p>\n<h3 id=\"we-could-support-our-customer-care-team-far-better-than-we-do\">We could support our customer care team far better than we do</h3>\n<p>Our customer care colleagues aren’t being set up for success when it comes to supporting our customers. They’re given little direction from FT.com engineering on how our systems fit together and we could be doing a far better job at sending them to the right team.</p>\n<p>We’re looking at how we can give them the tools they need for this, firstly with some better error signposting on FT.com. This will reduce the time between a user calling customer care and getting a fix rolled out, and it’ll further reduce our time spent on triage.</p>\n<h3 id=\"theres-not-a-lot-of-shared-ownership-of-site-performance\">There’s not a lot of shared ownership of site performance</h3>\n<p>We’re investigating how we can improve performance across the whole of FT.com. We’re currently not doing <em>badly</em>, but we don’t have all the tools in place to ensure that we don’t take steps back in terms of web performance. This could easily become a future issue.</p>\n<h3 id=\"were-focused-a-lot-on-the-website\">We’re focused a lot on the website</h3>\n<p>Customer Products is the group that looks after both FT.com and our mobile apps. As you can probably tell from reading this post, there’s been more of a focus on the website from our team for now. Having a shared centralised team to focus on the reliability of the website <em>and</em> the apps is something we’d like to explore.</p>\n<h2 id=\"heres-to-another-year\">Here’s to another year</h2>\n<p>We’re excited to have made it to a full year, and we’re really proud of some of our achievements. I’m sure there will be a lot more to come over the next year.</p>\n<p>Thanks for reading</p>",
				"image": {
					"url": "https://rowanmanning.com/posts/operational-excellence-one-year-on/reliability-kit-error.jpg",
					"title": "A JSON-based error log containing app details (e.g. commit hash, name, Node.js version) and error information (e.g. message, code, stack trace, and related systems)"
				},
				"media": [
					{
						"url": "https://rowanmanning.com/posts/operational-excellence-one-year-on/reliability-kit-error.jpg",
						"image": "https://rowanmanning.com/posts/operational-excellence-one-year-on/reliability-kit-error.jpg",
						"title": "A JSON-based error log containing app details (e.g. commit hash, name, Node.js version) and error information (e.g. message, code, stack trace, and related systems)",
						"length": null,
						"type": "image",
						"mimeType": "image/jpeg"
					}
				],
				"authors": [
					{
						"name": "Rowan Manning",
						"email": null,
						"url": "https://rowanmanning.com/"
					}
				],
				"categories": [
					{
						"label": "Operational Excellence",
						"term": "operational-excellence",
						"url": "https://rowanmanning.com/tags/operational-excellence/"
					}
				]
			},
			{
				"id": "https://rowanmanning.com/posts/halving-my-github-pages-build-time/",
				"title": "Halving my GitHub Pages Build Time",
				"description": null,
				"url": "https://rowanmanning.com/posts/halving-my-github-pages-build-time/",
				"published": "2022-08-21T09:35:00.000Z",
				"updated": "2022-08-21T09:35:00.000Z",
				"content": "<p>Recently I spent some time overhauling the build process for this website because it was <em>really</em> slow. After <a href=\"/weeknotes/\">nearly 100 weeknotes</a> (including a lot of images to resize) my build/deploy process was taking 6–7 minutes. Locally my entire site builds in 500–800ms so I decided to investigate where my performance issues were.</p>\n<p>The TL;DR here is that my builds have dropped to ~3 minutes, more than half my original times. I’ve also removed some uncertainty about exactly <em>when</em> my site will get deployed. Here are the steps I went through:</p>\n<ol>\n<li>\n<p>I realised that I wasn’t caching <a href=\"https://gohugo.io/\">Hugo</a>’s build or <code>resources/_gen</code> folders in CI, which meant that the entire site had to be built every time. No wonder this was slow! Caching these folders based on a hash of the <code>config</code>, <code>content</code>, <code>data</code>, and <code>themes</code> folder reduced build times by a lot and I’m now taking full advantage of how fast Hugo is. Here’s the step I defined:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-yaml\" data-lang=\"yaml\"><span class=\"line\"><span class=\"cl\"><span class=\"w\"> </span>- <span class=\"nt\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l\">Cache built website</span><span class=\"w\">\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"w\">   </span><span class=\"nt\">uses</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l\">actions/cache@v3</span><span class=\"w\">\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"w\">   </span><span class=\"nt\">env</span><span class=\"p\">:</span><span class=\"w\">\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"w\">     </span><span class=\"nt\">cache-name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l\">cache-website-v1</span><span class=\"w\">\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"w\">   </span><span class=\"nt\">with</span><span class=\"p\">:</span><span class=\"w\">\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"w\">     </span><span class=\"nt\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"sd\">\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"sd\">       build\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"sd\">       resources/_gen</span><span class=\"w\">       \n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"w\">     </span><span class=\"nt\">key</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l\">${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('config', 'content', 'data', 'themes') }}</span><span class=\"w\">\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"w\">     </span><span class=\"nt\">restore-keys</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"sd\">\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"sd\">       ${{ runner.os }}-build-${{ env.cache-name }}-\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"sd\">       ${{ runner.os }}-build-\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"sd\">       ${{ runner.os }}-</span><span class=\"w\">       \n</span></span></span></code></pre></div></li>\n<li>\n<p>I wasn’t taking advantage of GitHub Actions’ ability to run jobs in parallel at all, I was waiting for the linting to pass before running tests, and then waiting for the tests to pass before building the site.</p>\n<p>The linter, tests, and build have absolutely no shared tasks except that they all have the need to use Node.js and npm. I moved this to a new <code>install</code> job and made the linting, testing, and build happen in parallel. The final <code>deploy</code> job relies on all three of these passing. This gave me <em>so much</em> more speed.</p>\n\n      \n      <figure class=\"image\">\n      \t<a href=\"https://github.com/rowanmanning/rowanmanning.com/actions/runs/2897812350\">\n      \t\t<img\n      \t\t\t\n      \t\t\t\tsrcset=\"\n      \t\t\t\t\thttps://rowanmanning.com/posts/halving-my-github-pages-build-time/workflow-in-parallel_hue637fd86fc9e86c49a6b762d82aa9dc7_45632_720x0_resize_box_3.png,\n      \t\t\t\t\thttps://rowanmanning.com/posts/halving-my-github-pages-build-time/workflow-in-parallel_hue637fd86fc9e86c49a6b762d82aa9dc7_45632_1080x0_resize_box_3.png 1.5x,\n      \t\t\t\t\thttps://rowanmanning.com/posts/halving-my-github-pages-build-time/workflow-in-parallel.png 2x\n      \t\t\t\t\"\n      \t\t\t\n      \t\t\tsrc=\"https://rowanmanning.com/posts/halving-my-github-pages-build-time/workflow-in-parallel.png\"\n      \t\t\talt=\"A screenshot of the parallel jobs on GitHub: install flows into build, verify, and test jobs\"\n      \t\t\twidth=\"1292\"\n      \t\t\theight=\"388\"\n      \t\t\tloading=\"lazy\"\n      \t\t/>\n      \t</a>\n      \t\n      </figure>\n\n</li>\n<li>\n<p>One large bottleneck was the way I was deploying. Until very recently the only way to build GitHub pages with Hugo was to push to a separate branch or folder then a <em>separate</em> GitHub action would do the deploy under the hood. So, no matter how fast my own workflow was, I was still having to wait for a second one to trigger.</p>\n<p>Very recently <a href=\"https://github.blog/changelog/2022-07-27-github-pages-custom-github-actions-workflows-beta/\">GitHub launched a beta for deploying to GitHub Pages from your <em>own</em> GitHub Action</a>. This is game-changing for me because I have full control over the zipped artefact that gets deployed. No more waiting for GitHub to decide when to deploy my pages, I can trigger it myself immediately after the build 🎉</p>\n<p>The GitHub Actions starter workflows repo contains <a href=\"https://github.com/actions/starter-workflows/tree/main/pages\">examples</a> of how to do this with many other static site generators.</p>\n<p>The new steps used are:</p>\n<ul>\n<li><a href=\"https://github.com/actions/configure-pages\"><code>actions/configure-pages</code></a></li>\n<li><a href=\"https://github.com/actions/upload-pages-artifact\"><code>actions/upload-pages-artifact</code></a></li>\n<li><a href=\"https://github.com/actions/deploy-pages\"><code>actions/deploy-pages</code></a></li>\n</ul>\n</li>\n</ol>\n<p>These three steps had a huge impact, reducing my build and deploy times by more than half. Some of the issues were me writing suboptimal actions originally, but it’s also been massively helped by the new GitHub features.</p>\n<p><a href=\"https://github.com/rowanmanning/rowanmanning.com/actions/runs/2897812350\">You can view an example run on my website repo here</a> and you can see <a href=\"https://github.com/rowanmanning/rowanmanning.com/blob/main/.github/workflows/build-deploy.yml\">my full GitHub Actions workflow here</a>.</p>",
				"image": null,
				"media": [],
				"authors": [
					{
						"name": "Rowan Manning",
						"email": null,
						"url": "https://rowanmanning.com/"
					}
				],
				"categories": [
					{
						"label": "Hugo",
						"term": "hugo",
						"url": "https://rowanmanning.com/tags/hugo/"
					},
					{
						"label": "GitHub",
						"term": "github",
						"url": "https://rowanmanning.com/tags/github/"
					},
					{
						"label": "Side Projects",
						"term": "side-projects",
						"url": "https://rowanmanning.com/tags/side-projects/"
					}
				]
			},
			{
				"id": "https://rowanmanning.com/posts/webmentions-for-your-static-site/",
				"title": "Webmentions for your Static Site",
				"description": null,
				"url": "https://rowanmanning.com/posts/webmentions-for-your-static-site/",
				"published": "2021-07-06T21:45:00.000Z",
				"updated": "2021-07-06T21:45:00.000Z",
				"content": "<p>Some time ago, my friend and colleague chee <a href=\"https://chee.party/2021/05/16/sunday-16th-may-2021/\">told me about Webmentions</a>. I’ll be honest, I didn’t fully understand what they were. It took me about a month to actually look into them, and wow it’s been a while since I’ve been this excited about a technology!</p>\n<p>I’m very late to the party, <a href=\"https://indieweb.org/Webmention#History\">which started back in 2012</a>, but now I’ve arrived I’m ready to fully commit (whatever the web dev equivalent of drinking <abbr title=\"White Wine and Monster Ultra White\">Kalimotxo Blondes</abbr>\n and dancing to Old Town Road is). After reading this post, I’m hoping that you will:</p>\n<ul>\n<li>Be at least half as excited about Webmentions as I am,</li>\n<li>Have some idea how to implement Webmentions on a static website,</li>\n<li>Try sending a Webmention to this page just to <a href=\"#responses\">see your comments appear below</a>.</li>\n</ul>\n<p>This post assumes some knowledge of web technologies and that you’re able to publish your own website.</p>\n<h2 id=\"what-are-webmentions\">What are Webmentions?</h2>\n<p>For the uninitiated, I should probably attempt to explain what Webmentions are. If you know this part then <a href=\"#static-site-difficulties\">feel free to skip ahead</a>.</p>\n<p>Webmention is a <a href=\"https://www.w3.org/TR/webmention/\">web standard</a> for mentions, conversations, and other social interactions (such as likes and reposts). It defines a way for these interactions to happen across different websites without the need for a central server, allowing for decentralized interactions with other people on the web. At its core, a Webmention is a notification from one site to another that says “Hi, somebody linked to your website from this one”.</p>\n<h3 id=\"webmention-flow\">Webmention Flow</h3>\n<p>A typical Webmention flow might look like this, for example:</p>\n<ol>\n<li>\n<p>Kara writes an interesting post on her website (which is set up to receive Webmentions).</p>\n</li>\n<li>\n<p>Simon reads Kara’s post and links to it in a new post on his <em>own</em> site.</p>\n</li>\n<li>\n<p>Simon’s publishing software sees this link and sends a Webmention to Kara’s website. This Webmention lets Kara know that her interesting post has been linked to, including the URL of Simon’s post.</p>\n</li>\n<li>\n<p>Kara’s website checks that Simon’s post actually contains a link to her post, and then it includes this information on her site.</p>\n</li>\n</ol>\n<p>The end result of this flow is that Simon’s post links to Kara’s, and Kara’s now links back to Simon’s. The information can be displayed in any way and, in this scenario, Kara might want to display Simon’s post as a comment on her post. They have achieved this and avoided many of the issues with centralized commenting systems:</p>\n<ul>\n<li>\n<p>The commentary on Kara’s post is decentralized – it is stored on Simon and Kara’s websites, rather than relying on a third-party server. Both people <em>own</em> all the content they’ve written.</p>\n</li>\n<li>\n<p>Neither person has had to hand their personal information over to a third party.</p>\n</li>\n<li>\n<p>Kara does not need to maintain a “comments” form or any kind of sign in for people who want to comment on her posts.</p>\n</li>\n</ul>\n<p>So that’s webmentions! If you need more of a deep dive than this, then <a href=\"https://alistapart.com/article/webmentions-enabling-better-communication-on-the-internet/\">I recommend starting with this article</a>.</p>\n<h2 id=\"static-site-difficulties\">Static Site Difficulties</h2>\n<p>In my previous example, I talked about servers being able to send and receive webmentions. With a <a href=\"https://en.wikipedia.org/wiki/Static_web_page\">static website</a> (one that is plain HTML or is built from a Static Site Generator), there is no server involved. This means that both sending and receiving webmentions require a few more hoops to jump through:</p>\n<ul>\n<li>\n<p>Receiving webmentions isn’t possible without <em>some</em> kind of server, you need a URL that can receive <code>source</code> and <code>target</code> URLs and store the result somewhere and this isn’t possible with plain old HTML.</p>\n</li>\n<li>\n<p>Sending webmentions manually is possible, but it adds a new step for you to complete every time you publish content. It’s possible to fully automate sending during the build step of your static site.</p>\n</li>\n<li>\n<p>Displaying webmentions requires you to store them somewhere, which means you need a <a href=\"https://jamstack.org/generators/\">static site generator</a> that supports rendering content from data files (e.g. JSON), or you need to accept that you can only render webmentions with JavaScript on the client.</p>\n</li>\n</ul>\n<h2 id=\"receiving-webmentions\">Receiving Webmentions</h2>\n<p>As mentioned above, you need some kind of server to receive webmentions. Luckily there are a few <a href=\"https://webmention.net/implementations/#services\">services</a> which can do this for you. I opted for <a href=\"https://webmention.io/\">Webmention.io</a> which is a free hosted service. To set up the basics of receiving webmentions, you’ll need to:</p>\n<ul>\n<li>\n<p>Set up <a href=\"https://indieweb.org/IndieAuth\">IndieAuth</a> for your website:</p>\n<ul>\n<li>\n<p>Make sure a social profile of yours (e.g. Twitter, GitHub) links to the home page of your website. You can do this via the edit profile page of these services (<a href=\"https://twitter.com/settings/profile\">Twitter’s is here</a> and <a href=\"https://github.com/settings/profile\">GitHub’s is here</a>).</p>\n</li>\n<li>\n<p>Make sure that your home page includes a link to the same social profile page with a <code>rel=\"me\"</code> attribute. I have these links in my site header, but they could go anywhere:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"line\"><span class=\"cl\"><span class=\"p\"><</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"https://twitter.com/rowanmanning\"</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">\"me\"</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">    @rowanmanning on Twitter\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"p\"></</span><span class=\"nt\">a</span><span class=\"p\">></span>\n</span></span></code></pre></div></li>\n<li>\n<p>Because both the user profile page on the third party website and your website now include <code>rel=\"me\"</code> links pointing to each other, IndieAuth can verify that you are who you say you are. <a href=\"http://microformats.org/wiki/RelMeAuth\">The standard behind this is called RelMeAuth</a>.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Sign into <a href=\"https://webmention.io/\">Webmention.io</a> using your newly configured IndieAuth website. You’ll need to authenticate via one of the third parties you linked to.</p>\n</li>\n<li>\n<p>Add a <code><link></code> element to the <code><head></code> of every page on your website where you want to receive webmentions – I just added it to every page. This link acts as an instruction to other Webmention-enabled sites that you’re using Webmention.io and that they should send webmentions here:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"line\"><span class=\"cl\"><span class=\"p\"><</span><span class=\"nt\">link</span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">\"webmention\"</span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"https://webmention.io/YOURDOMAIN.COM/webmention\"</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"p\">/></span>\n</span></span></code></pre></div></li>\n</ul>\n<p>Now you’re ready to receive webmentions! If somebody who publishes webmentions links to your website, it will appear on your Webmention.io dashboard for you to see.</p>\n<p>An additional step for me was that I wanted to capture interactions on social websites like Twitter. The large social sites don’t implement Webmention themselves, however, another third party service can be used to watch for social interactions on other sites and publish webmentions on their behalf.</p>\n<p>Setting up <a href=\"https://brid.gy/\">Bridgy</a> was relatively quick, and it can connect to many social sites and forward on any interactions with your content as webmentions. I added Twitter, which means that any time someone tweets a link to my content, or likes/retweets links to my content, I’m notified and can display it on my website.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"/posts/webmentions-for-your-static-site/twitter-vs-website.png\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/webmentions-for-your-static-site/twitter-vs-website_huebe806ca99ace6c9c71e805d182b6dc9_63634_720x0_resize_box_3.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/webmentions-for-your-static-site/twitter-vs-website_huebe806ca99ace6c9c71e805d182b6dc9_63634_1080x0_resize_box_3.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/webmentions-for-your-static-site/twitter-vs-website.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/webmentions-for-your-static-site/twitter-vs-website.png\"\n\t\t\talt=\"Two comparison screenshots, showing likes of one of my tweets on one side, and the equivalent likes on my website on the other\"\n\t\t\twidth=\"1200\"\n\t\t\theight=\"240\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n\t\t<figcaption class=\"image__caption\">The same two likes displayed on Twitter (left) and my website (right)</figcaption>\n\t\n</figure>\n\n<h2 id=\"storing-webmentions\">Storing Webmentions</h2>\n<p>So now you’re receiving webmentions, it’s time to store them alongside your website code so that we can move onto the next step, displaying them. For this, you’ll need for your website to include a build step, which is already needed for many Static Site generators.</p>\n<p>My website is built with <a href=\"https://gohugo.io/\">Hugo</a> and is hosted on GitHub Pages, so I already have a <a href=\"https://github.com/rowanmanning/rowanmanning.com/blob/main/.github/workflows/build-deploy.yml\">build step</a> that uses GitHub Actions to automatically generate the static HTML and deploy it via the <code>build</code> branch.</p>\n<p>Hugo allows for your website to access JSON files in the <code>data</code> folder so, for me, it makes sense for my build step to fetch webmentions from Webmention.io via their API and store them in this folder for use later.</p>\n<p>I won’t document the entire script that I wrote, but I went with the approach of <a href=\"https://github.com/rowanmanning/rowanmanning.com/blob/main/.github/workflows/fetch-webmentions.yml\">fetching new webmentions every 30 minutes using GitHub Actions scheduling</a>. You can find <a href=\"https://docs.github.com/en/actions/reference/events-that-trigger-workflows#scheduled-events\">documentation on scheduled actions here</a>.</p>\n<p>My script started out pretty much like this (you can get your own Webmention.io API key from your <a href=\"https://webmention.io/settings\">settings page</a>):</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"line\"><span class=\"cl\"><span class=\"kr\">const</span> <span class=\"nx\">got</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'got'</span><span class=\"p\">);</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"kr\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"kr\">await</span> <span class=\"nx\">got</span><span class=\"p\">(</span><span class=\"s1\">'https://webmention.io/api/mentions.jf2'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"nx\">responseType</span><span class=\"o\">:</span> <span class=\"s1\">'json'</span><span class=\"p\">,</span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"nx\">searchParams</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n</span></span><span class=\"line\"><span class=\"cl\">        <span class=\"nx\">domain</span><span class=\"o\">:</span> <span class=\"s1\">'rowanmanning.com'</span><span class=\"p\">,</span>\n</span></span><span class=\"line\"><span class=\"cl\">        <span class=\"s1\">'per-page'</span><span class=\"o\">:</span> <span class=\"mi\">1000</span><span class=\"p\">,</span>\n</span></span><span class=\"line\"><span class=\"cl\">        <span class=\"nx\">token</span><span class=\"o\">:</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">WEBMENTION_API_KEY</span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\">}</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"p\">});</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Webmentions!'</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">children</span><span class=\"p\">);</span>\n</span></span></code></pre></div><p>It got complicated fairly quickly. The things I added were:</p>\n<ul>\n<li>Storing the last time we fetched webmentions to reduce unnecessary work,</li>\n<li>Converting the webmention URL to a safe filename, e.g. <code>/weeknotes/36/</code> to <code>/data/webmentions/weeknotes--36.json</code>,</li>\n<li>Saving each of the webmentions for a specific URL into the relevant JSON file,</li>\n<li>Committing these new files and pushing them to the repo so that we don’t need to fetch webmentions on every build.</li>\n</ul>\n<p>You can look at the <a href=\"https://github.com/rowanmanning/rowanmanning.com/blob/main/scripts/site-wm-fetch.js\">full script here</a>, and you can also see an example of these saved JSON files on GitHub: <a href=\"https://github.com/rowanmanning/rowanmanning.com/blob/main/data/webmentions/raw/posts--yeehaw.json\">here’s the JSON file</a> for my <a href=\"/posts/yeehaw/\">Yeehaw blog post</a>.</p>\n<p>So now that we’re storing our webmentions alongside our website content, the next step is displaying them on each of the pages.</p>\n<h2 id=\"displaying-webmentions\">Displaying Webmentions</h2>\n<p>With webmentions saved as JSON, the next thing we need is to display them alongside the content they link to. This step will differ depending on which static site generator you’re using. For my site, built with Hugo, it meant adding something like this to my page templates:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-go-html-template\" data-lang=\"go-html-template\"><span class=\"line\"><span class=\"cl\"><span class=\"cm\">{{/* Replace \"/\" in the relative permalink of the post with \"--\" */}}</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"cm\">{{/* this matches the file names of our JSON files */}}</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"cp\">{{</span><span class=\"w\">\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"w\">  </span><span class=\"nx\">$slug</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"na\">.RelPermalink</span><span class=\"w\">\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nx\">replaceRE</span><span class=\"w\"> </span><span class=\"s\">\"^/|/$\"</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\">\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nx\">replaceRE</span><span class=\"w\"> </span><span class=\"s\">\"/\"</span><span class=\"w\"> </span><span class=\"s\">\"--\"</span><span class=\"w\">\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"w\"></span><span class=\"cp\">}}</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"cm\">{{/* Access Site.Data.webmentions[slug] */}}</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"cm\">{{/* which is the JSON file matching our page */}}</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"cm\">{{/* default to an empty array if no mentions exist */}}</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"cp\">{{</span><span class=\"w\">\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"w\">  </span><span class=\"nx\">$webmentions</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">index</span><span class=\"w\"> </span><span class=\"na\">$.Site.Data.webmentions</span><span class=\"w\"> </span><span class=\"nx\">$slug</span><span class=\"w\">\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nx\">default</span><span class=\"w\"> </span><span class=\"nx\">slice</span><span class=\"w\">\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"w\"></span><span class=\"cp\">}}</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"cm\">{{/* ...loop over webmentions and display them */}}</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"p\"><</span><span class=\"nt\">ul</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">  <span class=\"cp\">{{</span><span class=\"w\"> </span><span class=\"k\">range</span><span class=\"w\"> </span><span class=\"nx\">$webmentions</span><span class=\"w\"> </span><span class=\"cp\">}}</span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\"><</span><span class=\"nt\">li</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">      Mentioned on\n</span></span><span class=\"line\"><span class=\"cl\">      <span class=\"p\"><</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"</span><span class=\"cp\">{{</span><span class=\"w\"> </span><span class=\"na\">.source</span><span class=\"w\"> </span><span class=\"cp\">}}</span><span class=\"s\">\"</span><span class=\"p\">></span><span class=\"cp\">{{</span><span class=\"w\"> </span><span class=\"na\">.source</span><span class=\"w\"> </span><span class=\"cp\">}}</span><span class=\"p\"></</span><span class=\"nt\">a</span><span class=\"p\">></span>:\n</span></span><span class=\"line\"><span class=\"cl\">      <span class=\"cp\">{{</span><span class=\"w\"> </span><span class=\"na\">.content</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nx\">safeHTML</span><span class=\"w\"> </span><span class=\"cp\">}}</span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\"></</span><span class=\"nt\">li</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">  <span class=\"cp\">{{</span><span class=\"w\"> </span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"cp\">}}</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"p\"></</span><span class=\"nt\">ul</span><span class=\"p\">></span>\n</span></span></code></pre></div><p>Webmention as a standard doesn’t specify how you should display webmentions on your website. It also doesn’t advise on how to <em>safely</em> include other peoples’ content on your website. The above code by itself is an attack vector because it will inject any HTML sent as part of a webmention. This could include malicious <code><script></code> elements, adverts, or styles that might break your page or trick your visitors onto malware sites.</p>\n<p>With this in mind, the next step is to add in a script that processes the raw webmentions and makes sure that their content is safe to display.</p>\n<p><a href=\"https://github.com/rowanmanning/rowanmanning.com/blob/main/scripts/site-wm-process.js\">My script</a> is more complex than you might need, but it does the following to make things safer:</p>\n<ul>\n<li>\n<p>It filters webmentions to make sure that they have author details. A lack of author details makes them pretty useless and I decided to exclude them as they most often indicate spam.</p>\n</li>\n<li>\n<p>If a webmention includes HTML, it runs it through <a href=\"https://github.com/cure53/DOMPurify\">DOMPurify</a> with some custom settings. This strips out any elements that could be easily used maliciously – iframes, scripts, styles, etc.</p>\n</li>\n<li>\n<p>It truncates content intelligently, so that super long HTML doesn’t break my pages. I look for the specific link that led to the webmention being sent and truncate text on either side of it.</p>\n</li>\n<li>\n<p>It turns images and videos into links – I just don’t feel like I can trust incoming images to be safe to display on my website and it feels like there’s potential for abuse. I might revise this later and introduce trusted sources for image and video content.</p>\n</li>\n<li>\n<p>It normalises webmention types and adds metadata (like whether the mention is from Twitter) so that I can choose to display these differently on the website.</p>\n</li>\n</ul>\n<p>You can view the way that webmentions display on my site by looking at the <a href=\"/weeknotes/36/#responses\">responses section</a> of many of my weeknotes and posts. You could stop here, but sending webmentions to your friends is also fun.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"/weeknotes/36/#responses\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/webmentions-for-your-static-site/responses-styled_hu260615037ace7cee4028c4eefb192504_112414_720x0_resize_box_3.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/webmentions-for-your-static-site/responses-styled_hu260615037ace7cee4028c4eefb192504_112414_1080x0_resize_box_3.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/webmentions-for-your-static-site/responses-styled.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/webmentions-for-your-static-site/responses-styled.png\"\n\t\t\talt=\"A screenshot of the responses on one of my weeknotes\"\n\t\t\twidth=\"1200\"\n\t\t\theight=\"700\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n</figure>\n\n<h2 id=\"sending-webmentions\">Sending Webmentions</h2>\n<p>Now that your site is receiving webmentions, it’s time to start alerting other people when you link to their content! I found the process of sending a Webmention to be tougher to implement, and it feels a little more disjointed than my approach to receiving.</p>\n<p>This section is split into multiple headings because there’s some preparatory work we need to do to the site HTML before we can send webmentions.</p>\n<h3 id=\"webmention-markup\">Webmention Markup</h3>\n<p>The page which is sending a Webmention must mark up content in a way that indicates which part of the page is content, which is author information, which is the title, etc. You can also specify what type of Webmention should be sent – because the spec and the flow are relatively light, there’s scope for a Webmention to handle almost any web-based social interaction, which is really cool.</p>\n<p>The way that you specify which part of the page is content and what kind of Webmention to send is by using <a href=\"https://microformats.org/\">Microformats</a> in your HTML, specifically <a href=\"https://microformats.org/wiki/h-entry\">h-entry</a> and <a href=\"https://microformats.org/wiki/h-card\">h-card</a>. Microformats help machines to understand your content, they’re less scary than they sound.</p>\n<p>So for example if you have a blog post which looks like this:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"line\"><span class=\"cl\"><span class=\"p\"><</span><span class=\"nt\">article</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\"><</span><span class=\"nt\">header</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">        <span class=\"p\"><</span><span class=\"nt\">h1</span><span class=\"p\">></span>My First Post<span class=\"p\"></</span><span class=\"nt\">h1</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\"></</span><span class=\"nt\">header</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\"><</span><span class=\"nt\">div</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">        <span class=\"p\"><</span><span class=\"nt\">p</span><span class=\"p\">></span>Post content goes here…<span class=\"p\"></</span><span class=\"nt\">p</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\"></</span><span class=\"nt\">div</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\"><</span><span class=\"nt\">footer</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">        Published <span class=\"p\"><</span><span class=\"nt\">time</span> <span class=\"na\">datetime</span><span class=\"o\">=</span><span class=\"s\">\"1988-01-26\"</span><span class=\"p\">></span>26th Jan<span class=\"p\"></</span><span class=\"nt\">time</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">        by <span class=\"p\"><</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"https://rowanmanning.com/\"</span><span class=\"p\">></span>Rowan Manning<span class=\"p\"></</span><span class=\"nt\">a</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\"></</span><span class=\"nt\">footer</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"p\"></</span><span class=\"nt\">article</span><span class=\"p\">></span>\n</span></span></code></pre></div><p>Our HTML with added Microformat classes would look like this:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"line\"><span class=\"cl\"><span class=\"p\"><</span><span class=\"nt\">article</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"h-entry\"</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\"><</span><span class=\"nt\">header</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">        <span class=\"p\"><</span><span class=\"nt\">h1</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"p-name\"</span><span class=\"p\">></span>My First Post<span class=\"p\"></</span><span class=\"nt\">h1</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\"></</span><span class=\"nt\">header</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\"><</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"e-content\"</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">        <span class=\"p\"><</span><span class=\"nt\">p</span><span class=\"p\">></span>Post content goes here…<span class=\"p\"></</span><span class=\"nt\">p</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\"></</span><span class=\"nt\">div</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\"><</span><span class=\"nt\">footer</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">        Published <span class=\"p\"><</span><span class=\"nt\">time</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"dt-published\"</span> <span class=\"na\">datetime</span><span class=\"o\">=</span><span class=\"s\">\"1988-01-26\"</span><span class=\"p\">></span>26th Jan<span class=\"p\"></</span><span class=\"nt\">time</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">        by <span class=\"p\"><</span><span class=\"nt\">a</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"p-author h-card\"</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"https://rowanmanning.com/\"</span><span class=\"p\">></span>Rowan Manning<span class=\"p\"></</span><span class=\"nt\">a</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\"></</span><span class=\"nt\">footer</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"p\"></</span><span class=\"nt\">article</span><span class=\"p\">></span>\n</span></span></code></pre></div><p>Microformats class names help a machine (in this case a Webmention receiver) to parse out the relevant details. These classes start with <code>h-</code>, <code>p-</code>, <code>e-</code>, <code>dt-</code> depending on the property being described, and you can find examples of <a href=\"https://microformats.org/wiki/h-entry#Properties\">all the properties for h-entry here</a>.</p>\n<p>Now your web page is ready to be parsed by a Webmention receiver, and you’re able to start sending them.</p>\n<h3 id=\"actually-sending-webmentions\">Actually Sending Webmentions</h3>\n<p>Now that you’ve got the markup in place you can already manually send webmentions! You can use <a href=\"https://indieweb.org/Webmention#Publisher_Services\">one of many services</a> to do this (I used <a href=\"https://telegraph.p3k.io/\">Telegraph</a> as a starting point).</p>\n<p>However, sending webmentions manually gets old pretty fast, and automating the sending was top of my To-Do list.</p>\n<p>Ideally, you should only be automatically sending webmentions for <em>new</em> content on your website, so my dilemma was “how do I run something every time new content is published?” as there’s not a simple way to hook into a new post being published on a static site. I could have spent a long time building a script for this to diff the built website in GitHub Actions, but I wanted something quicker to set up.</p>\n<p>I found <a href=\"https://webmention.app/\">Remy Sharp’s webmention.app</a> was a great compromise. My website <a href=\"/posts/i-like-rss/\">already has an RSS feed</a> and webmention.app contains a tutorial on how to send webmentions as soon as new content appears in an RSS feed – this meant I didn’t need to write something to spot new content myself.</p>\n<p>So you’ll need:</p>\n<ul>\n<li>\n<p>For your site to be publishing an RSS or Atom feed (most static site generators will make this easy for you).</p>\n</li>\n<li>\n<p>An <a href=\"https://ifttt.com/\">IFTTT</a> account to listen for new items in your feed.</p>\n</li>\n<li>\n<p>A webmention.app token and to have followed <a href=\"https://webmention.app/docs#using-ifttt-to-trigger-checks\">this tutorial</a>.</p>\n</li>\n</ul>\n<p>So now whenever I publish new content on my website, I get a notification from IFTTT to say that it’s sent webmentions on my behalf. The process is fully automated and I can focus on writing.</p>\n<h2 id=\"was-it-worth-it\">Was it Worth it?</h2>\n<p>Yes, absolutely! If for no other reason than I had a lot of fun reading about Webmention and digging into the problem of implementing them on a static website. It’s really nice knowing that social interactions with my content will eventually appear on my website and that I control the way everything looks and feels.</p>\n<p>Of course, things could be better and I’ll probably work to improve this setup over time:</p>\n<ul>\n<li>\n<p>Maybe I’ll eventually move away from Webmention.io and try to self-host my Webmention receiver.</p>\n</li>\n<li>\n<p>I’m tempted to write a script to automate webmention publishing, rather than relying on two different third parties.</p>\n</li>\n<li>\n<p>I want to make a lot of tweaks to the way that webmentions are displayed on my site, and work out a way to add trusted publishers so that I can display their images and videos.</p>\n</li>\n</ul>\n<p>So in conclusion, you should <em>absolutely</em> join the Webmention hype train (I’m looking at you, all the people I occasionally link to in my <a href=\"/weeknotes/\">weeknotes</a>). I think you’ll have fun, and I’m always gonna be willing to talk about this if you want an excuse to chat technology 🙂</p>",
				"image": {
					"url": "https://rowanmanning.com/posts/webmentions-for-your-static-site/response-icon.png",
					"title": "Response Icon"
				},
				"media": [
					{
						"url": "https://rowanmanning.com/posts/webmentions-for-your-static-site/response-icon.png",
						"image": "https://rowanmanning.com/posts/webmentions-for-your-static-site/response-icon.png",
						"title": "Response Icon",
						"length": null,
						"type": "image",
						"mimeType": "image/png"
					}
				],
				"authors": [
					{
						"name": "Rowan Manning",
						"email": null,
						"url": "https://rowanmanning.com/"
					}
				],
				"categories": [
					{
						"label": "Webmention",
						"term": "webmention",
						"url": "https://rowanmanning.com/tags/webmention/"
					},
					{
						"label": "Side Projects",
						"term": "side-projects",
						"url": "https://rowanmanning.com/tags/side-projects/"
					},
					{
						"label": "IndieWeb",
						"term": "indieweb",
						"url": "https://rowanmanning.com/tags/indieweb/"
					}
				]
			},
			{
				"id": "https://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/",
				"title": "Organising a virtual treasure hunt as a team social",
				"description": null,
				"url": "https://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/",
				"published": "2021-05-10T14:00:00.000Z",
				"updated": "2021-05-10T14:00:00.000Z",
				"content": "<p>On the 12th March 2020, we got an email from Cait, our head of department, which explained that we’d be working remotely for the foreseeable future. At the time we had no idea how long it would last. The months dragged on, and in February 2021 we realised that the anniversary of remote working was rapidly approaching.</p>\n<p>Working remotely has been tough, and many of us really miss the social aspect of being in an office – going for team lunches or just chatting while making tea. On top of this, <a href=\"https://medium.com/ft-product-technology/one-year-later-lessons-learned-from-remote-onboarding-122142e0173c\">we’ve hired a lot of new people since the pandemic began</a>, many of whom haven’t had a chance to meet their colleagues in less formal settings.</p>\n<p>We attempted to combat this throughout 2020 by running remote social events, at a team level and department level. We’ve lost count of the number of quizzes, virtual pictionaries, quizzes, Among Us games, and quizzes attended! We hosted <a href=\"https://medium.com/ft-product-technology/beyond-quizzes-making-and-streaming-a-radio-show-for-your-team-remote-social-1a061bde47f4\">radio shows</a>, we <a href=\"https://www.cronkshawfoldfarm.co.uk/goatsonzoom\">booked goats</a>, and in June 2020 <a href=\"https://alicebartlett.co.uk/\">Alice Bartlett</a> ran a virtual treasure hunt to say goodbye before her shared parental leave.</p>\n<p>When we (<a href=\"http://www.glynnphillips.co.uk/\">Glynn Phillips</a> and I) realised that a year of remote working was approaching, we decided to shamelessly steal Alice’s fun treasure hunt idea and expand it to work for the whole department. Once we had Alice’s blessing, we got to organising.</p>\n<p>This post tells the story of how much two engineers can overcommit to an idea. It explores the process we went through to create a fun virtual treasure hunt, and some lessons learned along the way.</p>\n<h2 id=\"planning\">Planning</h2>\n<p>Once we’d decided to do the treasure hunt, we were bursting with ideas. The first step was to get all these ideas down on paper and work out which things were achievable within a month, considering that we both had other work to do too. The brief we’d set ourselves of “virtual treasure hunt” is fairly open and could be interpreted in a bunch of different ways. Alice’s treasure hunt hid clues in Google docs and Slack mostly, and we both knew that we wanted a trail of clues through various virtual spaces like this. The first thing we did was write down a list of all the places we could possibly hide clues that would be accessible to anyone in the department. Our rough list was:</p>\n<ul>\n<li>Google docs</li>\n<li>Old emails</li>\n<li>Slack channels/bots</li>\n<li>Build a website</li>\n<li>Youtube video</li>\n<li>Google hangouts</li>\n<li>SMS</li>\n</ul>\n<p>We had more ideas initially but trimmed them down a lot to make sure we would have time to execute everything well. We decided against trying to get a real FT article published containing a clue or secretly committing code to the FT.com codebase because it felt a little risky. We also cut out things that wouldn’t work for everyone in the department, for example, clues hidden in GitHub issues would only be accessible to engineers.</p>\n<p>The next thing we needed was some inspiration to start producing clues to add to our hunt. We wanted to use things that were vaguely themed around our year working from home and news events from during the pandemic. We spent some time listing all the possible themes, facts, and figures that we could use in our clues and ended up with a long list of things to draw on.</p>\n<p>We had a list of around 30 ideas/themes. We adapted our initial list a little to make sure that we were not excluding our colleagues from Manila or Sofia – being too UK-centric would have made it more difficult for them.</p>\n<p>Lastly on planning, we needed to decide on the length of the hunt and how we wanted to structure the teams. We wanted teams of around four people, as this would make it harder to accidentally exclude a team member, and for the hunt to last 30–60 minutes so it was a reasonable thing to do in the middle of the day. We thought 10–15 clues should be enough to get started and do a test run.</p>\n<h2 id=\"hype\">Hype</h2>\n<p>One of the earliest decisions we made was that we needed to build hype for our treasure hunt. Department socials are optional attendance, and we knew we wanted a good number of people to get excited about it and attend. The very first thing we did was to get something in the calendar a good month in advance. Then we started the hype train with weekly announcements in Slack.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"/posts/organising-a-virtual-treasure-hunt/hype-01.png\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/hype-01.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/hype-01.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/hype-01.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/hype-01.png\"\n\t\t\talt=\"A Slack message containing a lot of “hype” emoji, and the words “FRIDAY HYPE BUILDING - WFH TREASURE HUNT\"\n\t\t\twidth=\"700\"\n\t\t\theight=\"103\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n</figure>\n\n\n\n<figure class=\"image\">\n\t<a href=\"/posts/organising-a-virtual-treasure-hunt/hype-02.png\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/hype-02.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/hype-02.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/hype-02.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/hype-02.png\"\n\t\t\talt=\"A Slack message containing a lot of “treasure chest” emoji, and the words “WFH TREASURE HUNT - TEAMS\"\n\t\t\twidth=\"700\"\n\t\t\theight=\"154\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n</figure>\n\n\n\n<figure class=\"image\">\n\t<a href=\"/posts/organising-a-virtual-treasure-hunt/hype-03.png\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/hype-03.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/hype-03.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/hype-03.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/hype-03.png\"\n\t\t\talt=\"A Slack message containing a lot of “hype” and “treasure chest” emoji, and the words “MORE FRIDAY HYPE BUILDING - WFH TREASURE HUNT\"\n\t\t\twidth=\"700\"\n\t\t\theight=\"179\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n</figure>\n\n<p>I think this helped build excitement, and on the day we had pretty good attendance as a result. By the week of the treasure hunt, we even had some of the participants hyping it for us.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"/posts/organising-a-virtual-treasure-hunt/hype-04.png\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/hype-04.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/hype-04.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/hype-04.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/hype-04.png\"\n\t\t\talt=\"A Slack message which contains only 240 “hype” emoji, posted by a colleague in Slack\"\n\t\t\twidth=\"700\"\n\t\t\theight=\"290\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n</figure>\n\n<h2 id=\"executing-the-plan\">Executing the plan</h2>\n<p>Once we had the hype train well and truly running, we started working on the clues. We put together a spreadsheet for planning out the flow between clues. We worked separately on a few clues each so that they could be done in parallel, and then slowly started tying them together with quick Slack discussions.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"/posts/organising-a-virtual-treasure-hunt/planning-spreadsheet.png\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/planning-spreadsheet_hu13ebc097a6c522b5a36eb7d15722b471_294505_720x0_resize_box_3.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/planning-spreadsheet_hu13ebc097a6c522b5a36eb7d15722b471_294505_1080x0_resize_box_3.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/planning-spreadsheet.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/planning-spreadsheet.png\"\n\t\t\talt=\"A Google Spreadsheet containing columns for clue, answer, hint, where it’s found, and where does it lead. The clues are linked to from this document\"\n\t\t\twidth=\"1359\"\n\t\t\theight=\"797\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n</figure>\n\n<p>We wanted to make sure that there was variety in the clues, for example, we didn’t want people to go through a long series of Google Docs in a row, so we tried to evenly distribute the format of the clues. This meant that we were constantly reshuffling and reworking things for a while.</p>\n<p>We also wrote down predetermined hints for each of the clues. We knew that people would get stuck occasionally and having a consistent and fair way to offer help would make things run smoother on the day.</p>\n<h3 id=\"google-docs\">Google Docs</h3>\n<p>Our Google Docs clues were a sight to behold if I say so myself. Google Slides allowed us to be quite visual and prevented the treasure hunt from becoming a prolonged trivia quiz.\nOne example is: “Who is <a href=\"https://www.ft.com/__origami/service/image/v2/images/raw/http%3A%2F%2Fcom.ft.imagepublish.upp-prod-eu.s3.amazonaws.com%2F001e0936-9cd9-11e9-b8ce-8b459ed04726?fit=scale-down&source=next&width=700\">JK</a> (our CPO) hanging out with at Cheltenham? Find a Slack channel with the full initials of JK’s companion. The next clue awaits you.”</p>\n\n\n<figure class=\"image\">\n\t<a href=\"/posts/organising-a-virtual-treasure-hunt/find-jk.png\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/find-jk_hu43adc60df4d7ed8e7a228598d260c4bf_1377042_720x0_resize_box_3.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/find-jk_hu43adc60df4d7ed8e7a228598d260c4bf_1377042_1080x0_resize_box_3.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/find-jk.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/find-jk.png\"\n\t\t\talt=\"A large crowd of people watching the horse race at Cheltenham. Two of the faces have been replaced with our CPO and Donald Trump\"\n\t\t\twidth=\"1200\"\n\t\t\theight=\"675\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n</figure>\n\n<p>We decided that even if a Google Doc <em>is</em> essentially a quiz, then we should make it more engaging by using visual elements that nod to our time in lockdown. For example, the Zoom Maths Quiz asked participants to add up key pandemic statistic, but it was run by famous people in STEM:</p>\n\n\n<figure class=\"image\">\n\t<a href=\"/posts/organising-a-virtual-treasure-hunt/maths-quiz.png\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/maths-quiz_hu0598baf3bc390d5c5c5c3de0761e0b80_1108011_720x0_resize_box_3.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/maths-quiz_hu0598baf3bc390d5c5c5c3de0761e0b80_1108011_1080x0_resize_box_3.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/maths-quiz_hu0598baf3bc390d5c5c5c3de0761e0b80_1108011_1440x0_resize_box_3.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/maths-quiz.png\"\n\t\t\talt=\"A screenshot of a Zoom chat window, which features Albert Einstein, Ada Lovelace, Alan Turing, and David Blackwell. Einstein is introducing a maths quiz via a drawn on speech bubble\"\n\t\t\twidth=\"1600\"\n\t\t\theight=\"900\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n</figure>\n\n<p>We had great feedback on these more visual clues, and people stayed engaged for longer because of them.</p>\n<h3 id=\"slack\">Slack</h3>\n<p>We knew we wanted to have some secret Slack channels and messages as part of the hunt, and we were originally thinking of writing a Slack bot that posed questions for people to answer. However, we realised that we may not have enough time for that. We didn’t want to just post messages from me or Glynn, and we wanted them to be obviously part of the treasure hunt, so we opted for setting up a Slack webhook and posting messages as various people via the API.</p>\n<p>The results were fun, and they made the Slack parts of the hunt a bit more interesting than just a written clue from one of the organisers.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"/posts/organising-a-virtual-treasure-hunt/donald-and-joe.png\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/donald-and-joe.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/donald-and-joe.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/donald-and-joe.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/donald-and-joe.png\"\n\t\t\talt=\"A screenshot of a fake Slack conversation between Donald Trump and Joe Exotic\"\n\t\t\twidth=\"700\"\n\t\t\theight=\"178\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n</figure>\n\n<p>To simplify things, we ran the scripts locally on our machines using a Slack API token. For anyone interested in doing something similar, there’s a quick set of scripts <a href=\"https://github.com/rowanmanning/treasurebot\">in this repo</a>.</p>\n<h3 id=\"website\">Website</h3>\n<p>With Glynn and I rarely getting a chance to work on a brand new website, we knew we had to build one as part of the treasure hunt. It gave us a chance to do things that were a bit more interactive than a Google Doc or Slack message. Glynn did an amazing job of setting this up and he hosted it on Netlify.</p>\n<p>To direct people to the website we used a mix of links in Google Docs or Slack, but we also used it as a way to verify answers. For example, the maths quiz included the instruction: “Go to <code>https://our.domain/X</code> where <code>X</code> is the solution to our maths problem.”</p>\n\n\n<figure class=\"image\">\n\t<a href=\"/posts/organising-a-virtual-treasure-hunt/joe-exotic-myspace.png\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/joe-exotic-myspace_huc5c3d4495ff60a4b9b29e1dfa60e92c5_659084_720x0_resize_box_3.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/joe-exotic-myspace_huc5c3d4495ff60a4b9b29e1dfa60e92c5_659084_1080x0_resize_box_3.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/joe-exotic-myspace_huc5c3d4495ff60a4b9b29e1dfa60e92c5_659084_1440x0_resize_box_3.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/joe-exotic-myspace.png\"\n\t\t\talt=\"A fake MySpace page for Joe Exotic. The background is a tiger print pattern, and there’s a word-search to one side\"\n\t\t\twidth=\"1600\"\n\t\t\theight=\"1032\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n\t\t<figcaption class=\"image__caption\">I think the result was beautiful</figcaption>\n\t\n</figure>\n\n<h3 id=\"video\">Video</h3>\n<p>One of the more time-consuming clues we decided to work on was a video. In 2019, the FT’s London office moved from One Southwark Bridge to Bracken House, a 10-minute walk. We decided to film the journey between the offices and asked participants to count things that they saw on the journey.</p>\n<p>We thought this would also pad the time a little bit as it required people to watch the same video multiple times to come up with an answer. This mix of short and longer clues worked well for us.</p>\n<p>You can <a href=\"https://www.youtube.com/watch?v=cFXNSm4ja_4\">watch the video here</a> but be warned there’s a guest appearance in the middle.</p>\n<figure class=\"embed\">\n\t<iframe\n\t\tclass=\"embed__youtube-video\"\n\t\tsrc=\"https://www.youtube.com/embed/cFXNSm4ja_4\"\n\t\tframeborder=\"0\"\n\t\tallowtransparency=\"true\"\n\t\tallow=\"fullscreen\"\n\t\ttitle=\"Watch on YouTube\"\n\t></iframe>\n\t<figcaption class=\"embed__caption\">Watch on YouTube</figcaption>\n</figure>\n\n<h3 id=\"sms\">SMS</h3>\n<p>I’ve been looking for a reason to play with SMS, and this seemed like a good opportunity to do so. We signed up for the <a href=\"https://www.twilio.com/\">Twilio</a> API. I expected this part of the treasure hunt to take forever, but it was really quick using Studio which requires no code.</p>\n<p>We went for a simple <code>Text <value> to <number></code> approach, and then the next clue was delivered back in an SMS response. It worked well and added a new format to reduce repetitive Google Docs and Slack channels.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"/posts/organising-a-virtual-treasure-hunt/sms-flow.png\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/sms-flow_hu0e1f6001e2dc6c5a3b60fb911a0e6810_416184_720x0_resize_box_3.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/sms-flow_hu0e1f6001e2dc6c5a3b60fb911a0e6810_416184_1080x0_resize_box_3.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/sms-flow_hu0e1f6001e2dc6c5a3b60fb911a0e6810_416184_1440x0_resize_box_3.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/sms-flow.png\"\n\t\t\talt=\"A screenshot of a Twilio Studio, with lines connecting an incoming SMS trigger to various automated responses\"\n\t\t\twidth=\"1600\"\n\t\t\theight=\"868\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n</figure>\n\n<h2 id=\"playtesting\">Playtesting</h2>\n<p>Once we’d reached 12 clues, we decided it was time to playtest the treasure hunt. We had several willing volunteers thanks to our hype-laden Slack messages, and we invited them to a run-through.</p>\n<p>On the day of the hunt we knew we wouldn’t be able to sit with each of the teams and watch them run through, so this was our only valuable opportunity to watch some people work through the clues. We couldn’t have asked for a better group of play-testers, it was a joy to watch <a href=\"https://www.ft.com/emma-lewis\">Emma Lewis</a>, <a href=\"https://jenjohnson.dev/\">Jennifer Johnson</a>, and <a href=\"https://twitter.com/teachlearncode\">Jennifer Shepherd</a> work together and we were super thankful for their time.</p>\n<p>We learned a lot from the playtest and made a lot of improvements. For a start, it took them half of their time to work out the first clue, which indicated to us that it was way too difficult. They also breezed through some of the other clues that we thought were much harder. If we’d had more time we would have had several more playtests with different groups, and I don’t recommend building a treasure hunt without at least one trial run.</p>\n<h2 id=\"the-day-of-the-hunt\">The day of the hunt</h2>\n<p>When the day of the treasure hunt arrived, we posted a few more hype messages and did some final preparations. We made the Google Docs publicly searchable for FT employees and pinned various Slack messages which were required for the clues to work.</p>\n<p>We did a final run-through of our introductory slides making sure we knew what we wanted to say, and then sat waiting for people to arrive. We were thrilled when 80 people ended up joining the Google Meet – our hype-building was successful.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"/posts/organising-a-virtual-treasure-hunt/treasure-hunt-slide.png\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/treasure-hunt-slide.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/treasure-hunt-slide.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/treasure-hunt-slide.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/treasure-hunt-slide.png\"\n\t\t\talt=\"A slide from our presentation, it contains an image of a treasure chest and the words “We’re going to take you on a treasure hunt to commemorate a pretty tough 365 days”\"\n\t\t\twidth=\"700\"\n\t\t\theight=\"393\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n</figure>\n\n<p>We ran through some guidelines in a presentation, people left to join their own team hangouts, and we posted the first clue on Slack.</p>\n<p>The next hour was adrenaline-fueled. We divided up helping any teams who were struggling, and we sat in the winners’ video chat which the last clue pointed to, waiting for the first people to arrive. We got ready to record finishing times so that people would know how they did and watched Google Docs to see how far each team had got.</p>\n<p>Watching all the treasure hunters trickle into the winners’ chat was super rewarding – everyone seemed to have a lot of fun, and nobody was too angry that we Rick Rolled them in the video clue.</p>\n<h3 id=\"what-went-well\">What went well</h3>\n<ul>\n<li>\n<p>Everyone arrived between 20 minutes and an hour from the start, and the number of hints we gave out was pretty even, so I think we gauged the difficulty well</p>\n</li>\n<li>\n<p>None of the clues had technical issues (we were worried about SMS for a while)</p>\n</li>\n<li>\n<p>The social encouraged people to interact a lot in their small teams and work together on the clues, so it didn’t feel like a passive activity</p>\n</li>\n<li>\n<p>People had a lot of fun and we got some lovely feedback, and people noticed the amount of effort we put in. Cait, our CPIO, said: “That was the most fun I have had at work in about a year”</p>\n</li>\n</ul>\n<h3 id=\"what-went-less-well\">What went less well</h3>\n<ul>\n<li>\n<p>We had some issues with breakout rooms in Google Hangouts which delayed the start of the quiz by a panicked 5 minutes. We probably could have tested this part of the hunt a bit more thoroughly</p>\n</li>\n<li>\n<p>We didn’t prepare what we were going to do in the winners chat, and we didn’t communicate that teams can leave once we’ve recorded their time. This meant that we had to awkwardly make small talk while trying to monitor the remaining teams</p>\n</li>\n</ul>\n<h2 id=\"wrapping-up\">Wrapping up</h2>\n<p>Once the last team had checked in and left, we breathed a sigh of relief. It was a super fun and rewarding experience, but also exhausting. I thoroughly recommend running something like this if your team or company is working remotely and hope you get some inspiration from this post.</p>\n<p>If you do so, we recommend:</p>\n<ul>\n<li>\n<p>Be inclusive - only hide clues in places that everyone will have access to, and think about different backgrounds and cultures when putting together clues. For us, this meant not being too London or Sofia centric</p>\n</li>\n<li>\n<p>Go overboard - adding fun details to your clues is really worth the extra work, people will enjoy your treasure hunt that much more</p>\n</li>\n<li>\n<p>Playtest as much as you can - just like user testing your website, this is invaluable and gives you a lot of insight into any changes you might need to make</p>\n</li>\n</ul>\n<p>Thanks for reading, happy treasure hunting!</p>",
				"image": {
					"url": "https://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/treasure-hunt-slide.png",
					"title": "A slide from our presentation, it contains an image of a treasure chest and the words “We’re going to take you on a treasure hunt to commemorate a pretty tough 365 days”"
				},
				"media": [
					{
						"url": "https://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/treasure-hunt-slide.png",
						"image": "https://rowanmanning.com/posts/organising-a-virtual-treasure-hunt/treasure-hunt-slide.png",
						"title": "A slide from our presentation, it contains an image of a treasure chest and the words “We’re going to take you on a treasure hunt to commemorate a pretty tough 365 days”",
						"length": null,
						"type": "image",
						"mimeType": "image/png"
					}
				],
				"authors": [
					{
						"name": "Rowan Manning",
						"email": null,
						"url": "https://rowanmanning.com/"
					}
				],
				"categories": [
					{
						"label": "Social",
						"term": "social",
						"url": "https://rowanmanning.com/tags/social/"
					},
					{
						"label": "Team Building",
						"term": "team-building",
						"url": "https://rowanmanning.com/tags/team-building/"
					},
					{
						"label": "Treasure",
						"term": "treasure",
						"url": "https://rowanmanning.com/tags/treasure/"
					}
				]
			},
			{
				"id": "https://rowanmanning.com/posts/i-like-rss/",
				"title": "I Like RSS",
				"description": null,
				"url": "https://rowanmanning.com/posts/i-like-rss/",
				"published": "2020-12-04T12:35:00.000Z",
				"updated": "2020-12-04T12:35:00.000Z",
				"content": "<div class=\"pin pin--right\">\n\n<figure class=\"image\">\n\t<a href=\"https://en.wikipedia.org/wiki/RSS#/media/File:Feed-icon.svg\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/i-like-rss/feed-icon.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/i-like-rss/feed-icon.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/i-like-rss/feed-icon.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/i-like-rss/feed-icon.png\"\n\t\t\talt=\"Feed icon\"\n\t\t\twidth=\"100\"\n\t\t\theight=\"100\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n</figure>\n</div>\n\n<p>I first heard about and started using <abbr title=\"Really Simple Syndication\">RSS</abbr>\n in early 2008, it was a huge deal for me – I’d been going to individual tech sites to consume my news, and had collected a large set of bookmarks. As I browsed the web I’d been dutifully ignoring a little orange icon that would eventually revolutionise the way I read content on the internet.</p>\n<p>This post explains RSS for the uninitiated, it talks through the different experiences I’ve had with feed readers over the years, and unashamedly promotes my new side project.</p>\n<h2 id=\"what-is-rss\">What is RSS?</h2>\n<p>I’m using the term RSS, when what I really mean is a <a href=\"https://en.wikipedia.org/wiki/Web_feed\">web feed</a>. A web feed is a form of syndication – where content from one website is made available in a machine-readable format so that it can be consumed elsewhere.</p>\n<p>So if you have a blog somewhere on the internet, it’s likely that your posts (by default) will be presented as HTML. HTML is amazing, but it’s a format designed to be read by <em>humans</em>. A machine finds HTML much more difficult to understand when it comes to extracting content from a page because there’s a lot of inconsistency in how HTML is written.</p>\n<p>For example, my website might have article content in the following markup:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"line\"><span class=\"cl\"><span class=\"p\"><</span><span class=\"nt\">article</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"main-content\"</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\"><</span><span class=\"nt\">h1</span><span class=\"p\">></span>This is my article<span class=\"p\"></</span><span class=\"nt\">h1</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\"><</span><span class=\"nt\">p</span><span class=\"p\">></span>Published <span class=\"p\"><</span><span class=\"nt\">time</span> <span class=\"na\">datetime</span><span class=\"o\">=</span><span class=\"s\">\"2020-01-26\"</span><span class=\"p\">></span>26th Jan 2020<span class=\"p\"></</span><span class=\"nt\">time</span><span class=\"p\">></</span><span class=\"nt\">p</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\"><</span><span class=\"nt\">p</span><span class=\"p\">></span> ... <span class=\"p\"></</span><span class=\"nt\">p</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"p\"></</span><span class=\"nt\">article</span><span class=\"p\">></span>\n</span></span></code></pre></div><p>Whereas someone else’s website might use something more like:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-html\" data-lang=\"html\"><span class=\"line\"><span class=\"cl\"><span class=\"p\"><</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"main-Hi07dOXkA\"</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\"><</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"article-hoBuu7MMQ\"</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">        <span class=\"p\"><</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"heading-area-kmcsJQLH5\"</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">            <span class=\"p\"><</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"heading-cJR9JlGUe\"</span><span class=\"p\">></span>This is my article<span class=\"p\"></</span><span class=\"nt\">div</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">            <span class=\"p\"><</span><span class=\"nt\">div</span><span class=\"p\">></span>Posted January 26th 2020<span class=\"p\"></</span><span class=\"nt\">div</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">            <span class=\"p\"><</span><span class=\"nt\">div</span><span class=\"p\">></span> ... <span class=\"p\"></</span><span class=\"nt\">div</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">        <span class=\"p\"></</span><span class=\"nt\">div</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\"></</span><span class=\"nt\">div</span><span class=\"p\">></span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"p\"></</span><span class=\"nt\">div</span><span class=\"p\">></span>\n</span></span></code></pre></div><p>Web feeds help to make content more portable by being <em>strict</em> about how content is organised. The two most common file formats for web feeds are XML-based, and they are <a href=\"https://en.wikipedia.org/wiki/RSS\">RSS</a> and <a href=\"https://en.wikipedia.org/wiki/Atom_(Web_standard)\">Atom</a>.</p>\n<p>A blog post in an RSS feed looks something like this, and content <em>has</em> to be represented like this otherwise it’s not considered valid RSS:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-xml\" data-lang=\"xml\"><span class=\"line\"><span class=\"cl\"><span class=\"nt\"><item></span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"nt\"><title></span>This is my article<span class=\"nt\"></title></span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"nt\"><description></span> ... <span class=\"nt\"></description></span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"nt\"><link></span>https://www.example.com/blog/post<span class=\"nt\"></link></span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"nt\"><pubDate></span>Sun, 26 Jan 2020 01:37:00 +0000<span class=\"nt\"></pubDate></span>\n</span></span><span class=\"line\"><span class=\"cl\">    ...\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"nt\"></item></span>\n</span></span></code></pre></div><p>These strict formats mean that machines have a much easier time processing content, and that content can be easily consumed by an application called a feed reader, or <a href=\"https://en.wikipedia.org/wiki/News_aggregator\">news aggregator</a>. A feed reader takes a collection of RSS or Atom feeds, curated by you, and presents the content uniformly in a single interface.</p>\n<p>So if you’re consuming all your web content via a feed reader, you no longer have to maintain a list of websites to check back on – the process of fetching new content is automated by a machine and you can just enjoy reading it.</p>\n<h2 id=\"google-reader-20082013\">Google Reader (2008–2013)</h2>\n<p>Back in 2008, when I finally tried clicking on one of those orange buttons, a very popular feed reader was owned by Google. It was called Google Reader.</p>\n<div class=\"pin pin--left\">\n\n<figure class=\"image\">\n\t<a href=\"https://en.wikipedia.org/wiki/Google_Reader#/media/File:Google_Reader_interface.png\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/i-like-rss/google-reader_hu80fdb8fe8fdcb180a078159b06ba22a7_77205_240x0_resize_box_3.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/i-like-rss/google-reader_hu80fdb8fe8fdcb180a078159b06ba22a7_77205_360x0_resize_box_3.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/i-like-rss/google-reader.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/i-like-rss/google-reader.png\"\n\t\t\talt=\"A screenshot of the Google Reader interface\"\n\t\t\twidth=\"387\"\n\t\t\theight=\"257\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n\t\t<figcaption class=\"image__caption\">This extremely low resolution screenshot is the best I could do, I'm sorry</figcaption>\n\t\n</figure>\n</div>\n\n<p>This is what I decided to use to read content, because a feed reader owned by such a large company is probably the most stable and long-lasting choice, right?</p>\n<p>I think this was the golden age of my content consumption. Google Reader fit really nicely into my daily workflow, and I knew the program inside out.</p>\n<p>Then, in 2013, <a href=\"https://googleblog.blogspot.com/2013/03/a-second-spring-of-cleaning.html\">Google decided to retire the product</a>. It was a bummer.</p>\n<p>Google at least let people take some of their data with them, it was possible to export your list of feeds so that you could take them to a different reader. I downloaded my list of feeds and went in search of a new home.</p>\n<h2 id=\"fever-20132016\">Fever (2013–2016)</h2>\n<p>After being burned by Google Reader shutting down, I wanted some guaranteed stability. I decided the best way to ensure this would be to pay money for a feed reader. I settled on <a href=\"https://feedafever.com/\">Fever</a>.</p>\n<p>What I loved about Fever at the time is that it learned what content I liked to read and ordered the list of unread items by how much I might enjoy them, it was also self-hosted. The benefits of a self-hosted feed reader are:</p>\n<ul>\n<li>If the software is discontinued, you still have a copy of it and can probably continue running it (at least for a while)</li>\n<li>I can run it on my own server, or on a cloud provider like Heroku. Normally this means I can choose to pay if I want more stability or I can stick with a free tier if that’s all I need for now</li>\n<li>If I have the time and energy, I can make tweaks to the software to make it better suit my needs</li>\n</ul>\n<p>Despite all this my reading did tail off, and Fever failed to enter my daily workflow in the same way that Google Reader did, despite having paid $30 for it. My use of it had already dropped to nothing by 2016, and Fever’s maintainer discontinuing the project was the final nail in the coffin.</p>\n<h2 id=\"stringer-20162017\">Stringer (2016–2017)</h2>\n<div class=\"pin pin--right\">\n\n<figure class=\"image\">\n\t<a href=\"/posts/i-like-rss/stringer.png\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/i-like-rss/stringer_hu13130cfc7d4a901736fc28bd8e287c43_139287_240x0_resize_box_3.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/i-like-rss/stringer_hu13130cfc7d4a901736fc28bd8e287c43_139287_360x0_resize_box_3.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/i-like-rss/stringer_hu13130cfc7d4a901736fc28bd8e287c43_139287_720x0_resize_box_3.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/i-like-rss/stringer.png\"\n\t\t\talt=\"A screenshot of the Stringer interface\"\n\t\t\twidth=\"1138\"\n\t\t\theight=\"882\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n\t\t<figcaption class=\"image__caption\">The Stringer interface is really simple and stripped back compared to my previous readers</figcaption>\n\t\n</figure>\n</div>\n\n<p>After Fever, I thought maybe I could kickstart my reading again with a shiny new interface. I got rid of most of my feeds as the sheer volume of content had become too much for me and started fresh with <a href=\"https://github.com/swanson/stringer#readme\">Stringer</a>.</p>\n<p>Stringer was also self-hosted, and I enjoyed the simplicity of it – a minimally styled single-column list of content was all I really needed, especially as the number of feeds I was subscribed to was at an all time low. I think my consistent reading lasted a few months at best.</p>\n<p>By mid-2017 I was reading next to nothing about tech, and Stringer was abandoned by me. I turned it off without a replacement. When I came back a few years later to have a look at the project, it had been archived on GitHub so that’s yet another dead feed reader.</p>\n<h2 id=\"the-time-between-20172019\">The Time Between (2017–2019)</h2>\n<p>I spent a good few years really not reading anything or blogging myself, this coincided with a lull in my side project and open source work, because I’d burned myself out and fallen out of love with tech as an industry. But that’s a story for another day, the gist is I didn’t read anything for a pretty long time.</p>\n<h2 id=\"feedly-20192020\">Feedly (2019–2020)</h2>\n<div class=\"pin pin--left\">\n\n<figure class=\"image\">\n\t<a href=\"/posts/i-like-rss/feedly.png\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/i-like-rss/feedly_hu29515fdbcc016279d7698aba46675e53_141753_240x0_resize_box_3.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/i-like-rss/feedly_hu29515fdbcc016279d7698aba46675e53_141753_360x0_resize_box_3.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/i-like-rss/feedly_hu29515fdbcc016279d7698aba46675e53_141753_720x0_resize_box_3.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/i-like-rss/feedly.png\"\n\t\t\talt=\"A screenshot of the Feedly interface\"\n\t\t\twidth=\"1200\"\n\t\t\theight=\"664\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n\t\t<figcaption class=\"image__caption\">Feedly has some similarities to Google reader, but there's some stuff there I'll never actually use</figcaption>\n\t\n</figure>\n</div>\n\n<p>In 2019 I made a conscious effort to read a bit more. I’d been a line manager for a while at this point, and although I’d done some training, I was lacking the reading that had really boosted my early development career. I decided that rather than trying to set up an open source feed reader again, the quickest thing to do would be to use something commercial.</p>\n<p>I set up <a href=\"https://feedly.com/\">Feedly</a>, intending on upgrading away from their free tier if I liked it.</p>\n<p>I didn’t. There’s something about Feedly’s interface I just can’t get behind, there’s noise I don’t need like all the social buttons, as well as recommended content. I also found that the way feeds are managed didn’t gel with how I want to read. Maybe some of these things could be solved by paying for it, but I really don’t like it enough to do that.</p>\n<h2 id=\"audrey-2020\">Audrey (2020–???)</h2>\n<p>I didn’t really read a lot through the pandemic, but through October and November my reading increased markedly. Several of my friends and colleagues are publishing Weeknotes, and I was feeling left out. <a href=\"https://rowanmanning.com/weeknotes/\">I started publishing my own</a>, and at the same time my reading massively increased. I don’t yet know whether this is sustainable, but I used that and <a href=\"/posts/yeehaw\">my recent enjoyment of side projects</a> to do something inadvisable.</p>\n<p>I built my own feed reader and named it <a href=\"https://github.com/rowanmanning/audrey#readme\">Audrey</a>.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"https://github.com/rowanmanning/audrey#readme\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/i-like-rss/audrey_hu1a446d20d5ef139479a17a791d276ef8_163376_720x0_resize_box_3.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/i-like-rss/audrey_hu1a446d20d5ef139479a17a791d276ef8_163376_1080x0_resize_box_3.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/i-like-rss/audrey_hu1a446d20d5ef139479a17a791d276ef8_163376_1440x0_resize_box_3.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/i-like-rss/audrey.png\"\n\t\t\talt=\"A screenshot of the Audrey home page, showing unread entries from my feeds\"\n\t\t\twidth=\"2824\"\n\t\t\theight=\"1589\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n\t\t<figcaption class=\"image__caption\">Audrey's interface is stripped back, similar to Stringer. I'd like to keep it this way</figcaption>\n\t\n</figure>\n\n<p>This was a fun project to work on, and regardless of whether I stick with it, for now I have a feed reader that does things <em>exactly</em> the way I want them:</p>\n<ul>\n<li>The interface is simple and minimal</li>\n<li>I can host it wherever I want (it’s on Heroku at the moment)</li>\n<li>There are no algorithms suggesting content to me</li>\n<li>There are no advertisements</li>\n<li>There’s nothing tracking me</li>\n<li>I can add <a href=\"https://github.com/rowanmanning/audrey/issues\">new features</a> as and when I need them</li>\n</ul>\n<p>It’s not finished yet, I’m considering it a beta, but it’s stable enough that I’m using it as my every-day feed reader. If you’re interested in a feed reader that meets the above requirements, please give Audrey a go – <a href=\"https://github.com/rowanmanning/audrey#readme\">the docs are pretty great</a> and you can host it for free using <a href=\"https://www.mongodb.com/cloud/atlas\">MongoDB Atlas</a> and <a href=\"https://www.heroku.com/\">Heroku</a>.</p>\n<p>I’d really appreciate bug reports if you find any. Also let me know if you’re interested in a follow-up to this post explaining the architectural decisions I made 🙂</p>",
				"image": {
					"url": "https://rowanmanning.com/posts/i-like-rss/audrey.png",
					"title": "A screenshot of the Audrey home page, showing unread entries from my feeds"
				},
				"media": [
					{
						"url": "https://rowanmanning.com/posts/i-like-rss/audrey.png",
						"image": "https://rowanmanning.com/posts/i-like-rss/audrey.png",
						"title": "A screenshot of the Audrey home page, showing unread entries from my feeds",
						"length": null,
						"type": "image",
						"mimeType": "image/png"
					}
				],
				"authors": [
					{
						"name": "Rowan Manning",
						"email": null,
						"url": "https://rowanmanning.com/"
					}
				],
				"categories": [
					{
						"label": "Side Projects",
						"term": "side-projects",
						"url": "https://rowanmanning.com/tags/side-projects/"
					},
					{
						"label": "RSS",
						"term": "rss",
						"url": "https://rowanmanning.com/tags/rss/"
					},
					{
						"label": "Audrey",
						"term": "audrey",
						"url": "https://rowanmanning.com/tags/audrey/"
					}
				]
			},
			{
				"id": "https://rowanmanning.com/posts/yeehaw/",
				"title": "Yeehaw!",
				"description": null,
				"url": "https://rowanmanning.com/posts/yeehaw/",
				"published": "2020-11-20T11:50:00.000Z",
				"updated": "2020-11-20T11:50:00.000Z",
				"content": "<p>Way back in March this year, early on in lockdown, I had a burst of inspiration and a desire to build something silly. I don’t really build serious open-source things any more because tbh it’s a pretty thankless task and my free time is too valuable. However when there’s an opportunity to get a quick laugh from a friend by spending several solid evenings coding, sign me up!</p>\n<p>This idea came out of a Slack conversation with <a href=\"https://twitter.com/keirog\">Leaf</a>, I don’t remember why or which channel, but for some reason it made sense for two horse emoji to race across the screen which Leaf did by repeatedly editing a message until they reached the finish line. It was <em>gripping</em>, and while I was watching the two little 🏇 step along my Slack window I made a mental note that this joy could be replicated using computers.</p>\n<p><a href=\"https://github.com/rowanmanning/yeehaw#readme\">I got it finished</a>, which isn’t the actual point of this post (though you should definitely go and try it if you use Slack). This post explores the process I go through when I’m attempting a fun side project; I’ve outlined several tips which have helped me to make sure:</p>\n<ol>\n<li>I finish the project (because otherwise how will I make my friends laugh?)</li>\n<li>I actually enjoy building it (because otherwise why bother?)</li>\n</ol>\n\n\n<figure class=\"image\">\n\t<a href=\"https://github.com/rowanmanning/yeehaw#readme\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/yeehaw/demo.gif,\n\t\t\t\t\thttps://rowanmanning.com/posts/yeehaw/demo.gif 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/yeehaw/demo.gif 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/yeehaw/demo.gif\"\n\t\t\talt=\"Four horse racing emoji race across the screen from right to left, reaching the finish line in turn\"\n\t\t\twidth=\"640\"\n\t\t\theight=\"334\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n</figure>\n\n<h2 id=\"tip-1-define-goals\">Tip #1: Define Goals</h2>\n<p>I find it really easy to go off on tangents when I’m building something in my spare time. In my day job it’s easier to stay focused because a company is paying for my time and I don’t want to waste it; also I’m normally working alongside people in dedicated product and delivery roles. On side projects, I’m a bad product person, a bad delivery manager, and I find it very easy to waste <em>my</em> time.</p>\n<p>Defining a clear end goal helps me here, something short like: <em>“Make it so that people can easily race horses in Slack”</em>.</p>\n<p>I try to periodically check that whatever I’m working on moves me closer to that goal, and if the answer is no then I drop what I’m doing and refocus. This can be easier said than done, so I find setting an actual reminder every hour or so is a good shout, or having a post-it displayed clearly nearby.</p>\n<p>You don’t need to drop the extra things <em>forever</em>: if you think the idea you got side-tracked on is worth adding later then write it down and add it after you’ve shipped a version 1.</p>\n<p>Another thing I find useful when setting my goal is to give myself an explicit list of limitations – things that my project definitely will not do. Sometimes these are things that I suspect I’ll get stuck on, for example many of my projects get abandoned mid-way through trying to create my own user system. Other times these are things that I think will make the project less fun or useful. It helps me to write these down, for Yeehaw they were:</p>\n<ul>\n<li>It will not have a racing interface other than Slack (it was tempting to also build a web version at first)</li>\n<li>It will not waste the productive time of my colleagues too much (I don’t like getting in trouble)</li>\n<li>It will not ask for permission to read Slack messages (I didn’t want to have to deal with potential privacy/security issues)</li>\n</ul>\n<h2 id=\"tip-2-use-familiar-technology\">Tip #2: Use Familiar Technology</h2>\n<p>Something I used to say a lot is “I’m going to use this side project to learn X new technology”. This is fine and might work well for you, but for me it has resulted in a vast graveyard of abandoned projects. If learning is part of the <em>end goal</em> you defined above then definitely make learning a priority, but for Yeehaw my priority was to get it finished and make some people laugh.</p>\n<p>I have a list of go-to technologies when it comes to getting a project built quickly. I have my own reasoning for each of these which may apply to you, but it’s best to stick with what you’re comfortable using if you just want to get the thing finished. If you’re not a big side-project person then this might be the same stack you use at work.</p>\n<dl>\n<dt>Server-side Languages: JavaScript via <a href=\"https://nodejs.org/\">Node.js</a></dt>\n<dd>I write JavaScript faster than I write any other programming language; it’s familiar and I know how to get things done using it. In comparison if I’m writing in something typed then I get really caught up in defining everything perfectly.</dd>\n<dt>Server-side Frameworks: <a href=\"https://expressjs.com/\">Express</a></dt>\n<dd>I’ve been using Express for years, so again it’s really familiar. It’s also so commonplace that you can find the answer to almost any question quickly. I appreciate the flexibility of being able to dump everything in one file or split it up as appropriate. I don’t have a templating engine I use commonly, though I enjoyed using <a href=\"https://github.com/developit/htm\">htm</a> with <a href=\"https://github.com/i-like-robots/hyperons\">Hyperons</a> recently.</dd>\n<dt>Database: <a href=\"https://www.mongodb.com/\">MongoDB</a></dt>\n<dd>Tech bros on the internet seem to <em>hate</em> MongoDB. I’ve never bothered to find out why, but that alone is a great reason to use it for every project. I find MongoDB to be super quick to get set up in comparison to other databases. I can’t be bothered with migrations for a side project, and mine are never going to be high traffic enough to warrant worrying about performance or anything.</dd>\n<dt>Client-side Languages: JavaScript and <a href=\"https://sass-lang.com/\">Sass</a></dt>\n<dd>I avoid client-side JavaScript as much as possible; normally I build something with progressive enhancement in mind and then when it comes to the “enhance with JavaScript” bit I just can’t be bothered. I still use Sass, but it feels like I’m getting closer to a time where I don’t need a preprocessor for most things.</dd>\n<dt>Client-side Frameworks:</dt>\n<dd>I still haven’t learned how to do a React because who needs more Facebook in their life? See above note on progressive enhancement and client-side JavaScript, but I’m sure at some point I’ll learn something and update the way I do things.</dd>\n<dt>Hosting:</dt>\n<dd>I use <a href=\"https://www.heroku.com/\">Heroku</a> as a starting point for most projects because it doesn’t require me to do anything very ops-like. Heroku means I can have something deployed early, the free tier is fine for most things, and $7 per month isn’t <em>prohibitively</em> expensive for me if I need to have something running more reliably (though most of the time I end up paying for a month or two while the project is still interesting to me, then revert back to the free tier).</dd>\n</dl>\n<h2 id=\"tip-3-get-it-in-production-early\">Tip #3: Get It in Production Early</h2>\n<p>I try to get something running in production as quickly as possible, normally a page that only says “Hello World”. I also make sure that I have the pipeline from development to production set up early so that my changes are live almost as soon as I’ve pushed them.</p>\n<p>This isn’t a concept I made up, lots of engineering teams use <a href=\"https://en.wikipedia.org/wiki/Continuous_deployment\">Continuous Deployment</a>, but why only reap the benefits on work projects?</p>\n<p>For most of my Heroku-based projects, my process is:</p>\n<ol>\n<li>Create an empty repo on GitHub (normally private to start with) and push my starting-point “Hello World” code</li>\n<li>Create a Heroku app and <a href=\"https://devcenter.heroku.com/articles/github-integration\">connect it to the repo</a>, automatically deploying whenever a commit is pushed to the <code>main</code> branch</li>\n</ol>\n<p>I do this because I’ve been burned <em>a lot of times</em> by getting a project most of the way done and then realising that I’ve gone down a rabbit-hole that makes production a pain in the ass to set up. Also, if every commit you push ends up on a public URL then you know that your project will work when you’re finally ready to go live; the final fun step of showing people what you built is so much easier, as is getting early feedback.</p>\n<h2 id=\"tip-4-write-documentation\">Tip #4: Write Documentation</h2>\n<p>I will die on this hill. The smallest side project deserves some documentation, at least on how to get it running locally. Trust me, if you take a pause and come back to your project a week or month later you’re going to love your past self if you left instructions. A <a href=\"/posts/writing-a-friendly-readme/\">README</a> will do most of the time.</p>\n<p>Yeehaw requires a lot of fiddly setup, including having to create your own distributed Slack app if you want to run it locally. With some <a href=\"https://github.com/rowanmanning/yeehaw#slack-app-setup\">clear documentation</a> on this, I know that next time I want to work on the project I won’t spend hours trying to remember how it works.</p>\n<h2 id=\"tip-5-when-the-fun-stops-stop\">Tip #5: When the Fun Stops, Stop</h2>\n<p>If I’m spending my precious spare time writing code, I sure as hell better be enjoying myself. It’s not worth the hit to your mental health to try and push through when you’re no longer enjoying working on a side project. I’ve only got good at taking this advice from myself relatively recently; I used to force myself to continue working on things because of the sunk cost.</p>\n<p>Now if I sense that a side project has become a grind, perhaps I’ve bitten off more than I chew or my original idea just doesn’t strike me as fun any more, I just stop. It’s not a waste of time if you learned even a small thing, and maybe a bit of code you wrote somewhere in the project will be useful another time.</p>\n<h2 id=\"recap\">Recap</h2>\n<p>So to recap, when I decide a side project is worthy of my precious free time, I use the following tips to help me either get it finished or avoid burning out:</p>\n<ol>\n<li>\n<p>I <strong>define some goals</strong> to keep me focused</p>\n</li>\n<li>\n<p>I <strong>use familiar technology</strong> so that I can work faster and reduce the chance of abandoning my project</p>\n</li>\n<li>\n<p>I use <strong>Continuous Deployment</strong> so that I know my project works in production</p>\n</li>\n<li>\n<p>I <strong>write documentation</strong> so that I can pick up the project after a break</p>\n</li>\n<li>\n<p>If I’m not enjoying working on a project any more, I <strong>just stop</strong></p>\n</li>\n</ol>\n<p>I’m sure mine isn’t a comprehensive list of ways to manage side projects, I’m interested to hear yours. Tweet me about it below, or share your own tips. Also, <a href=\"https://github.com/rowanmanning/yeehaw#readme\">go and try out Yeehaw</a>!</p>",
				"image": {
					"url": "https://rowanmanning.com/posts/yeehaw/demo.gif",
					"title": "Four horse racing emoji race across the screen from right to left, reaching the finish line in turn"
				},
				"media": [
					{
						"url": "https://rowanmanning.com/posts/yeehaw/demo.gif",
						"image": "https://rowanmanning.com/posts/yeehaw/demo.gif",
						"title": "Four horse racing emoji race across the screen from right to left, reaching the finish line in turn",
						"length": null,
						"type": "image",
						"mimeType": "image/gif"
					}
				],
				"authors": [
					{
						"name": "Rowan Manning",
						"email": null,
						"url": "https://rowanmanning.com/"
					}
				],
				"categories": [
					{
						"label": "Side Projects",
						"term": "side-projects",
						"url": "https://rowanmanning.com/tags/side-projects/"
					},
					{
						"label": "Yeehaw",
						"term": "yeehaw",
						"url": "https://rowanmanning.com/tags/yeehaw/"
					}
				]
			},
			{
				"id": "https://rowanmanning.com/posts/a-new-home-for-pa11y/",
				"title": "A New Home For Pa11y",
				"description": null,
				"url": "https://rowanmanning.com/posts/a-new-home-for-pa11y/",
				"published": "2016-05-23T18:30:00.000Z",
				"updated": "2016-05-23T18:30:00.000Z",
				"content": "<p>I’m out of breath because I practically ran home to write this post. I’m excited because, as of today, <a href=\"https://github.com/pa11y/pa11y\">Pa11y</a> and all of the projects around it have moved to a <a href=\"https://github.com/pa11y\">new GitHub organisation</a>.</p>\n<p>This is an important step for us, we’re moving towards being a self-governing team and away from any one company. We believe this will help us better achieve our goal – to help make the web more accessible for everyone.</p>\n<p>We’re extremely grateful to both Nature Publishing Group and, later, Springer Nature for guiding Pa11y through the early years. We’d also like to thank Springer Nature for transferring the repositories over to the new organisation.</p>\n<h2 id=\"what-does-this-mean\">What Does This Mean?</h2>\n<p>For users of Pa11y, you’ll continue to be fully supported. In fact our level of support is getting better as more contributors join the project. Springer Nature will continue to sponsor the projects with developer time; the move allows other companies to do the same without their developers contributing to repos in another company’s organisation on work time.</p>\n<p>For contributors it means that we’ll be able to start giving out write access, and you can help to govern the projects. We’ve seen more and more contributions from people all over the world, and we’re excited to be able to work more closely with you all!</p>\n<h2 id=\"the-future\">The Future</h2>\n<p>This is the part of this post I’m most enthused about! We have so many plans for the months ahead, which we can now share with you all.</p>\n<h3 id=\"the-team\">The Team</h3>\n<p>The core team has grown and we now have more people supporting the various projects day to day. This means faster response times to issues and way better communication on all fronts.</p>\n<ul>\n<li><a href=\"https://twitter.com/pa11yorg\">We’re now on Twitter</a></li>\n<li>We’re announcing releases and writing up release notes</li>\n<li>We’re in the process of setting up a community chat for the projects</li>\n</ul>\n<p>We’ll start to introduce core team members soon via the new website. Which brings me nicely onto the next announcement…</p>\n<h3 id=\"a-new-website\">A New Website</h3>\n<p>We’re working on a <a href=\"http://pa11y.github.io/\">brand new website</a> for Pa11y which will act as a central point for all of the projects. Our current website does little for us, and we’re aiming to make it more useful to users and contributors alike.</p>\n<ul>\n<li>We’re finally adopting a <a href=\"http://pa11y.github.io/contributing/code-of-conduct/\">code of conduct</a></li>\n<li>We’ve written an extensive <a href=\"http://pa11y.github.io/contributing/\">contributors guide</a></li>\n<li>We’re making it easier to <a href=\"http://pa11y.github.io/contact/\">contact us</a></li>\n</ul>\n<p>We’d really love your feedback on the new site. It’s not ready for prime-time yet, but it’ll get closer with your help :)</p>\n<h3 id=\"pa11y-sidekick\">Pa11y Sidekick</h3>\n<p>The Pa11y team is very excited to announce plans for our next project. We’re code-naming this project “Sidekick”.</p>\n<p>What is <a href=\"https://github.com/pa11y/sidekick\">Pa11y Sidekick</a> going to do? Still to be defined, but our rough proposal at this stage: “like Travis, but for a11y testing, and with graphs”. A spangly replacement for <a href=\"https://github.com/pa11y/pa11y-dashboard\">pa11y-dashboard</a> and <a href=\"https://github.com/pa11y/pa11y-webservice\">pa11y-webservice</a>.</p>\n<ul>\n<li><a href=\"https://github.com/pa11y/sidekick/blob/master/PROPOSAL.md\">Read the proposal for Pa11y Sidekick</a></li>\n<li><a href=\"https://github.com/pa11y/sidekick/issues\">Suggest features</a>, you will definitely have ideas that we didn’t consider!</li>\n<li>Let us know what you think! The project will be much better with your ideas and feedback</li>\n</ul>\n<h2 id=\"thank-you\">Thank You</h2>\n<p>Thank you for reading up on Pa11y, thank you for using it, and thank you for contributing. Together we’re going to improve the accessibility of the web for everyone!</p>\n<p>Rowan, and the Pa11y team ❤️</p>",
				"image": {
					"url": "https://rowanmanning.com/posts/a-new-home-for-pa11y/pa11y-logo.png",
					"title": "The Pa11y logo, a P character in multiple colours"
				},
				"media": [
					{
						"url": "https://rowanmanning.com/posts/a-new-home-for-pa11y/pa11y-logo.png",
						"image": "https://rowanmanning.com/posts/a-new-home-for-pa11y/pa11y-logo.png",
						"title": "The Pa11y logo, a P character in multiple colours",
						"length": null,
						"type": "image",
						"mimeType": "image/png"
					}
				],
				"authors": [
					{
						"name": "Rowan Manning",
						"email": null,
						"url": "https://rowanmanning.com/"
					}
				],
				"categories": [
					{
						"label": "Accessibility",
						"term": "accessibility",
						"url": "https://rowanmanning.com/tags/accessibility/"
					},
					{
						"label": "Pa11y",
						"term": "pa11y",
						"url": "https://rowanmanning.com/tags/pa11y/"
					}
				]
			},
			{
				"id": "https://rowanmanning.com/posts/writing-a-friendly-readme/",
				"title": "Writing a Friendly README",
				"description": null,
				"url": "https://rowanmanning.com/posts/writing-a-friendly-readme/",
				"published": "2016-03-14T17:25:00.000Z",
				"updated": "2016-03-14T17:25:00.000Z",
				"content": "<p>Your project’s README is pretty important; it’s often the first thing that a person new to your project will see, and is frequently the only source of documentation. Your README does the same job for your open source project as a website does for a company, and while websites get a lot of user-experience attention, our README files are rarely even considered from a user perspective.</p>\n<p>This post will guide us through writing a friendly README – one that will be helpful and meet developers’ (our users) needs, whether they’re new to the project or know it well, whether they’re a veteran developer or a newcomer.</p>\n<p>We’ll be tackling this in sections, using a pretend library called “Paddington” as an example. Let’s start from the top.</p>\n<h2 id=\"project-heading\">Project Heading</h2>\n<p>While the existence of <a href=\"http://iampaddy.com/lifebelow600/\">“the fold” is debatable</a>, it’s fairly widely agreed that the top part of a website should be used to display the <em>most</em> important information. We can apply the same principle to our README.</p>\n<p>So what are the most important things? The project name is pretty important, as is what it actually <em>does</em>. So let’s ease ourselves in by adding those:</p>\n\n\n<figure class=\"image\">\n\t<a href=\"https://gist.github.com/rowanmanning/77f31b2392dda1b58674#file-heading-01-md\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/heading-01_huf8f15c0bd20e94d6ead012f903852849_10465_720x0_resize_box_3.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/heading-01_huf8f15c0bd20e94d6ead012f903852849_10465_1080x0_resize_box_3.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/heading-01_huf8f15c0bd20e94d6ead012f903852849_10465_1440x0_resize_box_3.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/writing-a-friendly-readme/heading-01.png\"\n\t\t\talt=\"Project heading with name and description\"\n\t\t\twidth=\"1956\"\n\t\t\theight=\"372\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n\t\t<figcaption class=\"image__caption\">Project heading with name and description</figcaption>\n\t\n</figure>\n\n<p>The above mostly caters for new users, but this top part of the README should help our existing users too; they have a few easy-to-answer questions. When I visit a project that I’m familiar with, I want to know:</p>\n<ul>\n<li>What’s the latest version?</li>\n<li>Is the build passing?</li>\n</ul>\n<p>As a new user, I have a few easy-to-answer questions as well:</p>\n<ul>\n<li>What language is it written in?</li>\n<li>What versions of that language does it support?</li>\n<li>Is it tested?</li>\n<li>What’s the license?</li>\n</ul>\n<p>We can answer all of these questions with <strong>badges</strong>! 🎉</p>\n<p>I opt for a row of badges just beneath the project description. A single row doesn’t occupy a lot of space and can convey an awful lot of information:</p>\n\n\n<figure class=\"image\">\n\t<a href=\"https://gist.github.com/rowanmanning/77f31b2392dda1b58674#file-heading-02-md\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/heading-02_hu7e2929c5d891ce13ae74a5df9f948028_20940_720x0_resize_box_3.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/heading-02_hu7e2929c5d891ce13ae74a5df9f948028_20940_1080x0_resize_box_3.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/heading-02_hu7e2929c5d891ce13ae74a5df9f948028_20940_1440x0_resize_box_3.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/writing-a-friendly-readme/heading-02.png\"\n\t\t\talt=\"Project heading with badges added\"\n\t\t\twidth=\"1956\"\n\t\t\theight=\"458\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n\t\t<figcaption class=\"image__caption\">Project heading with badges added</figcaption>\n\t\n</figure>\n\n<p>Aren’t they beautiful? I use a <a href=\"http://shields.io/\">service called shields.io</a> which provides consistent badge images as well as a way to add custom badges for license information etc.</p>\n<p>Lastly as part of the heading section, if the project or library is simple enough to allow it, we can add a quick usage example. This really helps new users understand what your project does and can be just as helpful as the description.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"https://gist.github.com/rowanmanning/77f31b2392dda1b58674#file-heading-03-md\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/heading-03_hu109b92e17f2a43ea4e4a397d135aba6a_32690_720x0_resize_box_3.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/heading-03_hu109b92e17f2a43ea4e4a397d135aba6a_32690_1080x0_resize_box_3.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/heading-03_hu109b92e17f2a43ea4e4a397d135aba6a_32690_1440x0_resize_box_3.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/writing-a-friendly-readme/heading-03.png\"\n\t\t\talt=\"Full project heading with an example\"\n\t\t\twidth=\"1956\"\n\t\t\theight=\"674\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n\t\t<figcaption class=\"image__caption\">Full project heading with an example</figcaption>\n\t\n</figure>\n\n<p>We’ve covered a lot in our top section in a relatively small amount of space. Well done, us! Now we need to move on to some of the more meaty questions that users have. Our README is going to get longer and potentially difficult to navigate, a sensible thing to do now would be to add a table of contents.</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<p>A table of contents is useful even in a relatively short README. It eases the pain of having to search for information, and gives the user some helpful jump-links to different parts of your documentation.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"https://gist.github.com/rowanmanning/77f31b2392dda1b58674#file-table-of-contents-01-md\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/table-of-contents-01_hu700d217d9fd6a88b96cb42ae123b0743_13584_720x0_resize_box_3.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/table-of-contents-01_hu700d217d9fd6a88b96cb42ae123b0743_13584_1080x0_resize_box_3.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/table-of-contents-01_hu700d217d9fd6a88b96cb42ae123b0743_13584_1440x0_resize_box_3.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/writing-a-friendly-readme/table-of-contents-01.png\"\n\t\t\talt=\"A nicely linked table of contents\"\n\t\t\twidth=\"1956\"\n\t\t\theight=\"548\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n\t\t<figcaption class=\"image__caption\">A nicely linked table of contents</figcaption>\n\t\n</figure>\n\n<p>If the user just wants to check the usage guide then why should they have to scroll through the installation instructions, which are potentially only useful the first time somebody uses your project?</p>\n<h2 id=\"requirements\">Requirements</h2>\n<p>Now we’ve reached a part of the documentation which is more useful to new users than anyone else, let’s be really friendly and make sure they get what they need. This is the place to add all of the requirements your project has: language, language versions, package managers, operating systems. Anything that isn’t covered as part of the project’s actual installation.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"https://gist.github.com/rowanmanning/77f31b2392dda1b58674#file-requirements-01-md\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/requirements-01_huc5526279f1d21e2f551e2d4459fa59e9_15045_720x0_resize_box_3.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/requirements-01_huc5526279f1d21e2f551e2d4459fa59e9_15045_1080x0_resize_box_3.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/requirements-01_huc5526279f1d21e2f551e2d4459fa59e9_15045_1440x0_resize_box_3.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/writing-a-friendly-readme/requirements-01.png\"\n\t\t\talt=\"Project requirements\"\n\t\t\twidth=\"1956\"\n\t\t\theight=\"482\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n\t\t<figcaption class=\"image__caption\">Project requirements</figcaption>\n\t\n</figure>\n\n<p>This can be written in prose or as a list, as long as it’s abundantly clear. This helps you too – it means fewer issues being opened asking why somebody can’t get your project running.</p>\n<p>You should also assume zero prior knowledge when documenting requirements. Make sure you add links to the language and package managers required, you may be aiding a user who’s completely new to these.</p>\n<h2 id=\"usage\">Usage</h2>\n<p>Your usage documentation is probably the most important part of your README, without it very few people are going to trawl through your code to get it working.</p>\n<p>Depending on the kind of project you’re writing a README for, this section could take many forms. You might need documentation for a programmatic API, a web interface, a web API, or a command-line tool; sometimes several of these. The guidelines below reference a JavaScript API, but you can apply them to other interfaces as well.</p>\n<p>Firstly we need to mention how to get hold of the code, whether it’s by cloning the repo or installing through a package manager. Don’t forget to link out to anything useful, to prevent anyone from getting stuck.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"https://gist.github.com/rowanmanning/77f31b2392dda1b58674#file-usage-01-md\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/usage-01_huf05aecbc0709f8f7b9f5306d9fa1c734_21952_720x0_resize_box_3.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/usage-01_huf05aecbc0709f8f7b9f5306d9fa1c734_21952_1080x0_resize_box_3.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/usage-01_huf05aecbc0709f8f7b9f5306d9fa1c734_21952_1440x0_resize_box_3.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/writing-a-friendly-readme/usage-01.png\"\n\t\t\talt=\"How to install Paddington\"\n\t\t\twidth=\"1956\"\n\t\t\theight=\"704\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n\t\t<figcaption class=\"image__caption\">How to install Paddington</figcaption>\n\t\n</figure>\n\n<p>When documenting an API, keep it clear and simple. This means documenting the majority use-case first, your happy path. This keeps everything nicely focused for first-time users. In our case, we outline the method arguments and return values, ideally with examples. The less ambiguous this is, the fewer questions you’ll get.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"https://gist.github.com/rowanmanning/77f31b2392dda1b58674#file-usage-02-md\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/usage-02_hu7afed9ad5669527ed3058e7cc628afe4_52599_720x0_resize_box_3.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/usage-02_hu7afed9ad5669527ed3058e7cc628afe4_52599_1080x0_resize_box_3.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/usage-02_hu7afed9ad5669527ed3058e7cc628afe4_52599_1440x0_resize_box_3.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/writing-a-friendly-readme/usage-02.png\"\n\t\t\talt=\"How to use Paddington\"\n\t\t\twidth=\"1956\"\n\t\t\theight=\"878\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n\t\t<figcaption class=\"image__caption\">How to use Paddington</figcaption>\n\t\n</figure>\n\n<p>Once we’ve covered our happy path, it’s also useful to document any errors that a user might come across as well as edge-cases. This can form a sub-section towards the end of your usage documentation, and is geared towards people who have already installed and used your project. Try to include a few keywords that stuck or confused users might search for.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"https://gist.github.com/rowanmanning/77f31b2392dda1b58674#file-usage-03-md\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/usage-03_hu615aa003c2d8aede945bd8926c4d9144_28856_720x0_resize_box_3.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/usage-03_hu615aa003c2d8aede945bd8926c4d9144_28856_1080x0_resize_box_3.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/usage-03_hu615aa003c2d8aede945bd8926c4d9144_28856_1440x0_resize_box_3.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/writing-a-friendly-readme/usage-03.png\"\n\t\t\talt=\"Edge-cases and errors\"\n\t\t\twidth=\"1956\"\n\t\t\theight=\"664\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n\t\t<figcaption class=\"image__caption\">Edge-cases and errors</figcaption>\n\t\n</figure>\n\n<h2 id=\"contributing\">Contributing</h2>\n<p>This part of your README is important, and can make a difference as to whether a user will become a contributor. Even if you have a <a href=\"https://help.github.com/articles/setting-guidelines-for-repository-contributors/\"><code>CONTRIBUTING</code> file</a>, assuming no prior knowledge of GitHub and open source, a user might not find it. This section should cover the basics and then link out to your <code>CONTRIBUTING</code> file if you have one.</p>\n<p>You can help yourself here too, add short instructions on how to run the tests and the criteria for accepting pull requests. This means that your review and acceptance process will be as frictionless as possible.</p>\n<p>This is also where you should add a link to your code of conduct, if you have one. You can make new contributors feel more comfortable, and assure them that any issues they have will be resolved. A good code of conduct to use is the <a href=\"http://contributor-covenant.org/\">Contributor Covenant</a>.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"https://gist.github.com/rowanmanning/77f31b2392dda1b58674#file-contributing-01-md\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/contributing-01_hu8858d30676629a73581fba626a08c618_34309_720x0_resize_box_3.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/contributing-01_hu8858d30676629a73581fba626a08c618_34309_1080x0_resize_box_3.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/contributing-01_hu8858d30676629a73581fba626a08c618_34309_1440x0_resize_box_3.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/writing-a-friendly-readme/contributing-01.png\"\n\t\t\talt=\"Contribution guidelines\"\n\t\t\twidth=\"1956\"\n\t\t\theight=\"656\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n\t\t<figcaption class=\"image__caption\">Contribution guidelines</figcaption>\n\t\n</figure>\n\n<h2 id=\"support-and-migration\">Support and Migration</h2>\n<p>A section on the support status of your project is very helpful, especially once you’ve released a few different major versions. This section is mostly useful to existing users who may need some hand-holding through a migration between major versions of your project.</p>\n<p>A full migration guide might be a bit long to add to your README, I use a <code>MIGRATION</code> file in the root of my project repositories and link to it from this section (<a href=\"https://github.com/springernature/pa11y/blob/master/MIGRATION.md\">see pa11y for an example</a>).</p>\n<p>If you have a support plan for older versions, outline it here. Also you can use a simple table to document the major releases and their end-of-support dates.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"https://gist.github.com/rowanmanning/77f31b2392dda1b58674#file-support-and-migration-01-md\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/support-and-migration-01_hu1b5aba6fbac7c8c0133f5f9565526fb3_52132_720x0_resize_box_3.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/support-and-migration-01_hu1b5aba6fbac7c8c0133f5f9565526fb3_52132_1080x0_resize_box_3.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/support-and-migration-01_hu1b5aba6fbac7c8c0133f5f9565526fb3_52132_1440x0_resize_box_3.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/writing-a-friendly-readme/support-and-migration-01.png\"\n\t\t\talt=\"Support and migration\"\n\t\t\twidth=\"1956\"\n\t\t\theight=\"950\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n\t\t<figcaption class=\"image__caption\">Support and migration</figcaption>\n\t\n</figure>\n\n<h2 id=\"license\">License</h2>\n<p>Lastly you should add a copyright notice and a link to the license that your project is released under. Without this information a lot of users, especially working in larger organisations, won’t be able to use your project. Even if you distribute your project with a <code>LICENSE</code> file, it’s helpful to include a link to it here.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"https://gist.github.com/rowanmanning/77f31b2392dda1b58674#file-license-01-md\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/license-01_huea17619e38e093ad7eb4bbde586afa8c_11749_720x0_resize_box_3.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/license-01_huea17619e38e093ad7eb4bbde586afa8c_11749_1080x0_resize_box_3.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/writing-a-friendly-readme/license-01_huea17619e38e093ad7eb4bbde586afa8c_11749_1440x0_resize_box_3.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/writing-a-friendly-readme/license-01.png\"\n\t\t\talt=\"License and copyright information\"\n\t\t\twidth=\"1956\"\n\t\t\theight=\"398\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n\t\t<figcaption class=\"image__caption\">License and copyright information</figcaption>\n\t\n</figure>\n\n<h2 id=\"other-sections\">Other Sections</h2>\n<p>What we’ve covered here is by no means all that your README could document. Other sections I’ve used in my projects include:</p>\n<dl>\n<dt><a href=\"https://github.com/rowanmanning/proclaim#why\">Why?</a></dt>\n<dd>If your project does something already catered for by another project or is particularly complex, it’s useful to provide some justification.</dd>\n<dt><a href=\"https://github.com/springernature/pa11y#common-questions\">Common Questions</a></dt>\n<dd>A place for frequently asked questions, to reduce duplicate issues being opened.</dd>\n<dt><a href=\"https://github.com/rowanmanning/commandeer#examples\">Examples</a></dt>\n<dd>Links out to example code or pointers on getting example applications running.</dd>\n<dt><a href=\"https://github.com/rowanmanning/joblint#thanks\">Thanks</a></dt>\n<dd>A section listing and thanking people who contributed to the project in a non-technical capacity.</dd>\n<dt>Changelog</dt>\n<dd>A description of and a link to your project’s change log.</dd>\n</dl>\n<h2 id=\"the-full-readme\">The Full README</h2>\n<p>Now we have a friendly README! You can <a href=\"https://gist.github.com/rowanmanning/77f31b2392dda1b58674#file-readme-md\">view the whole thing here</a>.</p>\n<p>I’m hoping more people think about the user’s needs when writing documentation, and please let me know if you think I’ve missed anything. I’m interested to hear your tips and opinions on what constitutes a helpful README.</p>",
				"image": null,
				"media": [],
				"authors": [
					{
						"name": "Rowan Manning",
						"email": null,
						"url": "https://rowanmanning.com/"
					}
				],
				"categories": [
					{
						"label": "Open-Source",
						"term": "open-source",
						"url": "https://rowanmanning.com/tags/open-source/"
					},
					{
						"label": "Writing",
						"term": "writing",
						"url": "https://rowanmanning.com/tags/writing/"
					},
					{
						"label": "Documentation",
						"term": "documentation",
						"url": "https://rowanmanning.com/tags/documentation/"
					}
				]
			},
			{
				"id": "https://rowanmanning.com/posts/an-evolving-website/",
				"title": "An Evolving Website",
				"description": null,
				"url": "https://rowanmanning.com/posts/an-evolving-website/",
				"published": "2016-03-07T20:15:00.000Z",
				"updated": "2016-03-07T20:15:00.000Z",
				"content": "<p>In an attempt to encourage myself to post more, I’ve given my website a design refresh! Whether this tactic works or not remains to be seen, but it prompted me to look through all of my old site designs. I thought it’d be fun to post them here.</p>\n<h2 id=\"2010-aka-corners-and-shadows\">2010 aka “Corners and Shadows”</h2>\n<p>Diagonal Lines! Border Radius! Box Shadows! Bright Colours! I think this design <a href=\"http://theoatmeal.com/comics/design_hell\">really pops</a>, don’t you? Just look at those icons. Yes, that <em>is</em> Google Buzz (I guess I was optimistic).</p>\n<p>Here’s a fun fact which embarrasses me now: several interviewers said that mentioning beer on my CV/website is part of the reason I got an interview. Bro.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"/posts/an-evolving-website/2010.jpg\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/an-evolving-website/2010_hu1863c4c95fd50f6ec0702dc714901923_116342_720x0_resize_q75_box.jpg,\n\t\t\t\t\thttps://rowanmanning.com/posts/an-evolving-website/2010.jpg 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/an-evolving-website/2010.jpg 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/an-evolving-website/2010.jpg\"\n\t\t\talt=\"2010 Design\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"438\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n</figure>\n\n<h2 id=\"2011-aka-jaunty-angles\">2011 aka “Jaunty Angles”</h2>\n<p>Look at those images! They’re not straight, and I’m doing it with <em>CSS</em>! This design reminds me of a wallpapered wall with a border, but in the house of somebody with no style. Thumbnails defining me include:</p>\n<ul>\n<li>Me with my head in my hands. Yep, still applies</li>\n<li>A design for a project that never got finished. Yep, still happens</li>\n<li>Me with my cats. Yep</li>\n</ul>\n\n\n<figure class=\"image\">\n\t<a href=\"/posts/an-evolving-website/2011.jpg\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/an-evolving-website/2011_hu034e65f0c04b49e657c45e591d8195e6_155894_720x0_resize_q75_box.jpg,\n\t\t\t\t\thttps://rowanmanning.com/posts/an-evolving-website/2011.jpg 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/an-evolving-website/2011.jpg 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/an-evolving-website/2011.jpg\"\n\t\t\talt=\"2011 Design\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"438\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n</figure>\n\n<h2 id=\"2012-aka-birth-of-a-blog\">2012 aka “Birth of a Blog”</h2>\n<p>Finally, my site does something more than advertise the fact that I like beer! Actually this is the point where my current green colour entered the scene, as well as that bar across the top.</p>\n<p>One aspect of this site needs tearing down. <strong>Look at that profile picture</strong>. <abbr title=\"Be right back\">BRB</abbr>\n – I’m going to curl up in a ball for a while. I oddly decided that for a home page, this image and some “about me” text was more important than the posts.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"/posts/an-evolving-website/2012.jpg\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/an-evolving-website/2012_hubf5e89cb462f70728f9a8f40b6f9e04f_176414_720x0_resize_q75_box.jpg,\n\t\t\t\t\thttps://rowanmanning.com/posts/an-evolving-website/2012.jpg 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/an-evolving-website/2012.jpg 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/an-evolving-website/2012.jpg\"\n\t\t\talt=\"2012 Design\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"438\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n</figure>\n\n<h2 id=\"2013-aka-what-the-pinky-cream\">2013 aka “What the Pinky Cream?”</h2>\n<p>OK what’s going on here? “What’s with the pinky cream?”, I yell at past-Rowan. At least in this design I’ve switched the ordering/priority of blog posts and bio.</p>\n<p>The pinky cream isn’t <em>that</em> far from <abbr title=\"Financial Times\">FT</abbr>\n pink. If I believed in anything supernatural I might read this as a sign that I was destined to work there.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"/posts/an-evolving-website/2013.jpg\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/an-evolving-website/2013_hu8e4d4a983a0481c80dfbb5c39f3ef81a_197120_720x0_resize_q75_box.jpg,\n\t\t\t\t\thttps://rowanmanning.com/posts/an-evolving-website/2013.jpg 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/an-evolving-website/2013.jpg 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/an-evolving-website/2013.jpg\"\n\t\t\talt=\"2013 Design\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"438\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n</figure>\n\n<h2 id=\"2014-aka-boxes-and-projects\">2014 aka “Boxes and Projects”</h2>\n<p>Here’s where I got carried away with <a href=\"https://jekyllrb.com/\">Jekyll</a> and decided that I had to use <em>all</em> the features. Adding projects just overcomplicated everything. I still like the individual post colours, and I’m glad the pinky cream has been tamed into slightly less pink boxes.</p>\n<p>The green bar at the top just keeps growing, and this is the first design to not display my age anywhere.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"/posts/an-evolving-website/2014.jpg\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/an-evolving-website/2014_hu0e77d94071aa7cd5a31d67bed0b0377a_118891_720x0_resize_q75_box.jpg,\n\t\t\t\t\thttps://rowanmanning.com/posts/an-evolving-website/2014.jpg 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/an-evolving-website/2014.jpg 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/an-evolving-website/2014.jpg\"\n\t\t\talt=\"2014 Design\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"438\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n</figure>\n\n<h2 id=\"2015-aka-spring-clean\">2015 aka “Spring Clean”</h2>\n<p>Projects are dead! There’s a lot less competing for your attention now, and I think that’s a good thing. This is probably the smallest design iteration there has been, which might mean I’m settling on something?</p>\n\n\n<figure class=\"image\">\n\t<a href=\"/posts/an-evolving-website/2015.jpg\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/an-evolving-website/2015_hu053a37feda0d3c24844df63d3ba30dff_94474_720x0_resize_q75_box.jpg,\n\t\t\t\t\thttps://rowanmanning.com/posts/an-evolving-website/2015.jpg 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/an-evolving-website/2015.jpg 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/an-evolving-website/2015.jpg\"\n\t\t\talt=\"2015 Design\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"438\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n</figure>\n\n<h2 id=\"2016-aka-stripped-back\">2016 aka “Stripped Back”</h2>\n<p>And here we are with the new design! I’ve continued what I was doing with the 2015 spring clean and really stripped back the home page to just blog posts.</p>\n<p>I’ve kept some of the things that I now consider almost signatures of my site: the green header bar, and the post colours. I’m pretty pleased with the outcome! Fingers crossed I’ll start writing again.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"/posts/an-evolving-website/2016.jpg\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/an-evolving-website/2016_hu98fc5c3a0f49cf892f209d2f5ffee0ff_75395_720x0_resize_q75_box.jpg,\n\t\t\t\t\thttps://rowanmanning.com/posts/an-evolving-website/2016.jpg 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/an-evolving-website/2016.jpg 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/an-evolving-website/2016.jpg\"\n\t\t\talt=\"2016 Design\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"438\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n</figure>\n\n<p>Thanks for reading ☺️</p>",
				"image": {
					"url": "https://rowanmanning.com/posts/an-evolving-website/2010.jpg",
					"title": "2010 Design"
				},
				"media": [
					{
						"url": "https://rowanmanning.com/posts/an-evolving-website/2010.jpg",
						"image": "https://rowanmanning.com/posts/an-evolving-website/2010.jpg",
						"title": "2010 Design",
						"length": null,
						"type": "image",
						"mimeType": "image/jpeg"
					}
				],
				"authors": [
					{
						"name": "Rowan Manning",
						"email": null,
						"url": "https://rowanmanning.com/"
					}
				],
				"categories": [
					{
						"label": "Design",
						"term": "design",
						"url": "https://rowanmanning.com/tags/design/"
					}
				]
			},
			{
				"id": "https://rowanmanning.com/posts/complex-routing-logic-with-thundermole/",
				"title": "Complex Routing Logic with Thundermole",
				"description": null,
				"url": "https://rowanmanning.com/posts/complex-routing-logic-with-thundermole/",
				"published": "2015-07-13T10:45:00.000Z",
				"updated": "2015-07-13T10:45:00.000Z",
				"content": "<p>Over the last year, we have begun the process of migrating many <a href=\"http://www.nature.com/siteindex/index.html\">Nature journals</a> to our new platform. Because journals on the new platform also come with a significant redesign, we were required to run an opt-in beta program to trial the new design and gather feedback.</p>\n<p>The beta program had many requirements:</p>\n<ul>\n<li>Opted out users should see the old version of the site on the legacy platform</li>\n<li>Opted in users should see the new version of the site on the new platform</li>\n<li>Old-style URLs should redirect to new-style URLs for opted-in users</li>\n<li>New-style URLs should redirect to old-style URLs for opted-out users</li>\n<li>We should be able to run a private beta for internal users</li>\n<li>We should be able to automatically opt-in a percentage of users as the beta matures</li>\n</ul>\n<p>It quickly became apparent that we’d need a layer in front of both platforms; with requests being routed based on whether the user is allowed to see the beta, and whether they’ve opted in.</p>\n<h2 id=\"enter-thundermole\">Enter Thundermole</h2>\n<p>The routing application we ended up building was code-named <em>Thundermole</em>. We wrote it in JavaScript as we have a lot of experience proxying requests with <a href=\"https://nodejs.org/\">Node.js</a>. We also wanted something light-weight that wouldn’t add much overhead to page loads.</p>\n<p>However most of our existing user-authentication logic and application routing existed as part of our new Ruby-based platform. We didn’t want to rewrite this logic in JavaScript so Thundermole quickly simplified further into a proxy application that routes requests based on an API response.</p>\n<p>This allowed us to inject a very small proxy layer (Thundermole) in front of both platforms, and reuse all of the existing application logic in a Ruby-based API. The application flow looks like this:</p>\n<ol>\n<li>A user request comes into Thundermole</li>\n<li>Thundermole calls our beta program API with the user request’s headers and path</li>\n<li>The API responds with a proxy target depending on the user’s opt-in status</li>\n<li>Thundermole routes the original user request to the specified target</li>\n</ol>\n<p>Thundermole’s role in our stack became very clear and simple: Proxy user requests to different applications based on an API response.</p>\n<h2 id=\"open-sourcing\">Open-Sourcing</h2>\n<p>We’re big fans of open-source, and as soon as Thundermole no longer needed to hold any business logic we decided that it belongs in the public domain. You can browse the source code and use Thundermole in your own stack here:</p>\n<p><a href=\"https://github.com/springernature/thundermole\">https://github.com/springernature/thundermole</a></p>\n<p>For when you want to write your own API, we’ve outlined a <a href=\"https://github.com/springernature/thundermole/blob/master/docs/API-Specification.md\">Thundermole API Specification</a>.</p>\n<p>As with all of our open-source projects, we love contributions and feedback. It’d also be pretty cool to say you wrote code that sits in front of Nature journals 😉</p>",
				"image": null,
				"media": [],
				"authors": [
					{
						"name": "Rowan Manning",
						"email": null,
						"url": "https://rowanmanning.com/"
					}
				],
				"categories": [
					{
						"label": "Node.js",
						"term": "node.js",
						"url": "https://rowanmanning.com/tags/node.js/"
					},
					{
						"label": "JavaScript",
						"term": "javascript",
						"url": "https://rowanmanning.com/tags/javascript/"
					}
				]
			},
			{
				"id": "https://rowanmanning.com/posts/accessibility-testing-with-pa11y/",
				"title": "Accessibility Testing with pa11y",
				"description": null,
				"url": "https://rowanmanning.com/posts/accessibility-testing-with-pa11y/",
				"published": "2014-03-11T09:10:00.000Z",
				"updated": "2014-03-11T09:10:00.000Z",
				"content": "<p><a href=\"https://github.com/springernature/pa11y\">pa11y</a> is a command-line tool used to find accessibility issues in web pages. Nature built and released pa11y to address a short-fall in automatable accessibility testing; it uses <a href=\"http://squizlabs.github.io/HTML_CodeSniffer/\">HTML CodeSniffer</a> in <a href=\"http://phantomjs.org/\">PhantomJS</a> to raise common issues and reports them in both human and machine readable formats. This post assumes that you’ve installed pa11y (<a href=\"https://github.com/springernature/pa11y#requirements\">requirements and instructions</a>).</p>\n<p>pa11y is most useful when it’s used almost like a linter – the numbers of errors, warnings, and notices are probably some of the most useful statistics, especially when plotted on a graph over time.</p>\n<p>Due to the fact that pa11y is a command-line tool, we can report the errors found but we can’t, for example, highlight elements in the DOM to illustrate these errors. However it does report a snippet of HTML for context as well as a CSS selector which you can use in-browser to find the relevant element.</p>\n<p>It’s also important to note that <em>pa11y is not a replacement for regular accessibility testing</em>. It’s not a magic bullet, and won’t catch everything that you could – it’s complementary to your existing workflow (which should include testing with actual users).</p>\n<h2 id=\"basic-command-line-usage\">Basic Command-Line Usage</h2>\n<p>The simplest way to quickly test a web page, is to execute the <code>pa11y</code> command with a URL. The following example will run tests on the Nature home page:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-sh\" data-lang=\"sh\"><span class=\"line\"><span class=\"cl\">pa11y nature.com\n</span></span></code></pre></div>\n\n<figure class=\"image\">\n\t<a href=\"/posts/accessibility-testing-with-pa11y/cli-report.png\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/accessibility-testing-with-pa11y/cli-report.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/accessibility-testing-with-pa11y/cli-report.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/accessibility-testing-with-pa11y/cli-report.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/accessibility-testing-with-pa11y/cli-report.png\"\n\t\t\talt=\"Pa11y command-line output, including a welcome message, a list of commands that have been run, and a list of accessibility issues with the page\"\n\t\t\twidth=\"720\"\n\t\t\theight=\"361\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n\t\t<figcaption class=\"image__caption\">Pa11y command-line output</figcaption>\n\t\n</figure>\n\n<p>You’ll see some output in the command line which describes some of the errors/warnings encountered. This is fine for quickly testing a page, but things start to get interesting when you play with pa11y’s options.</p>\n<p>Use the WCAG2AAA standard:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-sh\" data-lang=\"sh\"><span class=\"line\"><span class=\"cl\">pa11y --standard WCAG2AAA nature.com\n</span></span></code></pre></div><p>Filter out certain rules or types:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-sh\" data-lang=\"sh\"><span class=\"line\"><span class=\"cl\">pa11y --ignore <span class=\"s2\">\"notice;warning\"</span> nature.com\n</span></span></code></pre></div><p>Combining these options means you can get what you need out of pa11y with very little effort.</p>\n<h2 id=\"reporting-with-json\">Reporting With JSON</h2>\n<p>Reporting results as JSON can be extremely useful when you want to do things with the data, especially if you’re using pa11y as part of Continuous Integration. We’ll outline some uses below:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-sh\" data-lang=\"sh\"><span class=\"line\"><span class=\"cl\">pa11y --reporter json nature.com\n</span></span></code></pre></div><p>Output to a file:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-sh\" data-lang=\"sh\"><span class=\"line\"><span class=\"cl\">pa11y --reporter json nature.com > results.json\n</span></span></code></pre></div><h2 id=\"reporting-with-csv\">Reporting With CSV</h2>\n<p>You can also output CSV reports with pa11y, which can be useful if you need to do some manual processing or for ease of importing into a database. This is also very simple:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-sh\" data-lang=\"sh\"><span class=\"line\"><span class=\"cl\">pa11y --reporter csv nature.com\n</span></span></code></pre></div><p>Output to a file:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-sh\" data-lang=\"sh\"><span class=\"line\"><span class=\"cl\">pa11y --reporter csv nature.com > results.csv\n</span></span></code></pre></div><h2 id=\"reporting-with-html\">Reporting With HTML</h2>\n<p>If you prefer to generate a visual accessibility report that can be shared with non-programmers, you can use the HTML reporter:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-sh\" data-lang=\"sh\"><span class=\"line\"><span class=\"cl\">pa11y --reporter html nature.com > results.html\n</span></span></code></pre></div>\n\n<figure class=\"image\">\n\t<a href=\"/posts/accessibility-testing-with-pa11y/html-report.png\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/accessibility-testing-with-pa11y/html-report_hub5dc62a45a255895c7b2779245765ea9_40745_720x0_resize_box_3.png,\n\t\t\t\t\thttps://rowanmanning.com/posts/accessibility-testing-with-pa11y/html-report.png 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/accessibility-testing-with-pa11y/html-report.png 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/accessibility-testing-with-pa11y/html-report.png\"\n\t\t\talt=\"Pa11y HTML output, including dates for the run, a summary of error counts, and then details about the issues encountered on the page\"\n\t\t\twidth=\"840\"\n\t\t\theight=\"579\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n\t\t<figcaption class=\"image__caption\">Pa11y HTML output</figcaption>\n\t\n</figure>\n\n<h2 id=\"anything-missing\">Anything Missing?</h2>\n<p>We want pa11y to be useful for as many people as possible. If you think we’re missing a killer feature that is stopping you from using pa11y, then we’re more than happy to listen!</p>\n<p><a href=\"https://github.com/springernature/pa11y/issues\">Raise an issue</a> on GitHub or, even better, raise an issue with a pull-request.</p>\n<p>Also, if you’re doing anything interesting with pa11y, we’d love to hear about it.</p>",
				"image": {
					"url": "https://rowanmanning.com/posts/accessibility-testing-with-pa11y/pa11y-logo.png",
					"title": "The Pa11y logo, a P character in multiple colours"
				},
				"media": [
					{
						"url": "https://rowanmanning.com/posts/accessibility-testing-with-pa11y/pa11y-logo.png",
						"image": "https://rowanmanning.com/posts/accessibility-testing-with-pa11y/pa11y-logo.png",
						"title": "The Pa11y logo, a P character in multiple colours",
						"length": null,
						"type": "image",
						"mimeType": "image/png"
					}
				],
				"authors": [
					{
						"name": "Rowan Manning",
						"email": null,
						"url": "https://rowanmanning.com/"
					}
				],
				"categories": [
					{
						"label": "Accessibility",
						"term": "accessibility",
						"url": "https://rowanmanning.com/tags/accessibility/"
					},
					{
						"label": "Pa11y",
						"term": "pa11y",
						"url": "https://rowanmanning.com/tags/pa11y/"
					}
				]
			},
			{
				"id": "https://rowanmanning.com/posts/javascript-for-beginners-async/",
				"title": "JavaScript for Beginners: Async",
				"description": null,
				"url": "https://rowanmanning.com/posts/javascript-for-beginners-async/",
				"published": "2013-06-27T20:15:00.000Z",
				"updated": "2013-06-27T20:15:00.000Z",
				"content": "<p>This is the first in a series of posts which will explain some of the concepts and terminology which are thrown about in JavaScript land, with a focus on beginners. In this post we’ll be looking at the term “Async”; what it means and why it matters to you as a JavaScript developer.</p>\n<p>Recently, I was reminded of my early days in development. Being a self-taught JavaScript noob, it was easy to get left behind in technical conversations among more computer-sciency peers. One of the barriers was the terminology being used, terms like “Async”.</p>\n<h2 id=\"so-what-does-async-mean\">So, What Does “Async” Mean?</h2>\n<p>Async is short for “asynchronous”. It’s easier to understand async if you first understand what “synchronous”, the opposite, means.</p>\n<p>In programming, we can simplify the definition of synchronous code as “a bunch of statements in sequence”; so each statement in your code is executed one after the other. This means each statement has to wait for the previous one to finish executing.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"line\"><span class=\"cl\"><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'First'</span><span class=\"p\">);</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Second'</span><span class=\"p\">);</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Third'</span><span class=\"p\">);</span>\n</span></span></code></pre></div><p>The statements above will execute in order, outputting “First”, “Second”, “Third” to the console. That’s because it’s written synchronously.</p>\n<p>Asynchronous code takes statements outside of the main program flow, allowing the code after the asynchronous call to be executed immediately without waiting. You’ve probably used asynchronous programming before with <code>jQuery.ajax</code> or similar:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"line\"><span class=\"cl\"><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'First'</span><span class=\"p\">);</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"nx\">jQuery</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'page.html'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Second\"</span><span class=\"p\">);</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"p\">});</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Third'</span><span class=\"p\">);</span>\n</span></span></code></pre></div><p>In the example above, the output will be different: “First”, “Third”, “Second”. This is because the function passed into <code>jQuery.get</code> is not called immediately – it has to wait for jQuery to fetch the page you asked for before it can execute.</p>\n<p><em>“So why the hell use asynchronous code instead of synchronous code?”</em> I hear you ask! I’ll explain.</p>\n<h2 id=\"why-asynchronous\">Why Asynchronous?</h2>\n<p>When JavaScript is executed, synchronous code has the potential to block further execution until it has finished what it’s doing. In English, long-running JavaScript functions can make the UI or server unresponsive until the function has returned. Obviously this can result in a terrible user-experience.</p>\n<p>For example: if you want to load your latest tweets onto a web page, and you do this synchronously, then a visitor to your site won’t be able to do anything until those tweets are loaded. This could cause a long delay before they even get to see the content of your site! I’ve illustrated the problem below:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"line\"><span class=\"cl\"><span class=\"nx\">tweets</span> <span class=\"o\">=</span> <span class=\"nx\">loadTweetsSync</span><span class=\"p\">();</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// ... Wait\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// ... Do something with the tweets\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"nx\">doSomeOtherImportantThings</span><span class=\"p\">();</span>\n</span></span></code></pre></div><div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"line\"><span class=\"cl\"><span class=\"nx\">loadTweetsAsync</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"c1\">// ... Wait\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span>    <span class=\"c1\">// ... Do something with the tweets\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"p\">});</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"nx\">doSomeOtherImportantThings</span><span class=\"p\">();</span>\n</span></span></code></pre></div><p>In the second example, <code>doSomeOtherImportantThings</code> doesn’t have to wait for the tweets to load.</p>\n<h2 id=\"how-to-program-asynchronously\">How To Program Asynchronously</h2>\n<p>Although the purpose of this post is to explain the term, it would feel incomplete without a short overview of <em>how</em> to program asynchronously. I’m sure you’d like to know how to apply this knowledge.</p>\n<p>More often than not, this is done for you by browser/server APIs (XMLHttpRequest, Node <code>fs</code> module) or third-party libraries (jQuery.ajax). Most of the time, this is as far as you need to go – you wouldn’t asynchronize <em>everything</em>, as this can actually lead to less performant (and very complex) code.</p>\n<p>As a general rule of thumb, you use asynchronous code when performing expensive and time-consuming operations. You wouldn’t use it to change a CSS class on an element, for example.</p>\n<p>For when you need them, there are plenty of libraries which aid you in writing asynchronous code; <a href=\"https://github.com/caolan/async\">Async.js</a> is an excellent example.</p>\n<h2 id=\"in-summary\">In Summary</h2>\n<p>So to recap, synchronous code is executed in sequence – each statement waits for the previous statement to finish before executing. Asynchronous code doesn’t have to wait – your program can continue to run. You do this to keep your site or app responsive, reducing waiting time for the user.</p>\n<p>Thanks for reading. Let me know if there’s a topic you’d like to be covered in this series!</p>\n<p>Rowan</p>",
				"image": null,
				"media": [],
				"authors": [
					{
						"name": "Rowan Manning",
						"email": null,
						"url": "https://rowanmanning.com/"
					}
				],
				"categories": [
					{
						"label": "JavaScript",
						"term": "javascript",
						"url": "https://rowanmanning.com/tags/javascript/"
					},
					{
						"label": "Tutorial",
						"term": "tutorial",
						"url": "https://rowanmanning.com/tags/tutorial/"
					}
				]
			},
			{
				"id": "https://rowanmanning.com/posts/building-cssdb/",
				"title": "Building CSSDB",
				"description": null,
				"url": "https://rowanmanning.com/posts/building-cssdb/",
				"published": "2013-03-30T00:38:00.000Z",
				"updated": "2013-03-30T00:38:00.000Z",
				"content": "<p>Last weekend I built <a href=\"http://cssdb.co/\">CSSDB</a>, a curated collection of great CSS, Sass, LESS and Stylus libraries. It was primarily an excercise in learning, but it was also a site which I could have made excellent use of (especially in the early stages of my development career).</p>\n<p>I launched on Monday to little fanfare, but on Tuesday the site suddenly seemed to explode in popularity. This was quite unexpected, but I was excited to see my technical decisions come under some strain – it was addictive to watch my metrics and see how the site performed under load.</p>\n<p>After a couple more days, I thought it might be interesting to write up my decisions. So here we are.</p>\n<h2 id=\"on-paper\">On Paper</h2>\n<p>Before jumping into development work, there were a few decisions I’m glad I made before touching a line of code. I wanted the site to be as automated as possible. I couldn’t have known it at the time, but this turned out to be one of the best decisions I made considering the traffic and volume of submissions I started to get.</p>\n<p>There were two tasks which stood out to me as painful to complete manually. The first: handling and adding submissions; the second: keeping repository stats (stars, forks, etc.) up to date.</p>\n<p>To get an initial prototype out the door, <a href=\"http://github.com/\">GitHub</a> seemed an absolute no-brainer. The GitHub API is stable and well-documented – it could give me all the information I needed and had sensible rate limiting. Once this decision was made, a lot of the automation work just fell into place.</p>\n<h2 id=\"the-server-stack\">The Server Stack</h2>\n<p>Having experimented a lot in <a href=\"http://nodejs.org/\">Node.js</a>, it seemed a logical choice to me. I love writing JavaScript, and Node is extremely performant.</p>\n<p>I’d also been keen to work with a document store, which also makes sense for the site if you consider each library to be a document – there are no relations needed. For this, I chose <a href=\"http://www.mongodb.org/\">MongoDB</a>.</p>\n<p>Once I’d made some choices on my development stack, I had to consider hosting. Here I’ll come clean: I can hack my way around server-side code just fine, but I have to draw the line at sysadmin work. Quite frankly it doesn’t excite me that much, and I normally end up frustrated. For this reason, I started looking at cloud hosting platforms.</p>\n<p>I’ve used Nodejitsu before, but one of my bugbears there is that database hosting has to be purchased through a third-party. I ideally wanted a single service rather than cobbling together my app with server resources from a few different companies; this could get pricey quite quickly.</p>\n<p>In the end, I discovered (and decided on) <a href=\"https://modulus.io/\">Modulus</a>. Their focus is on Node.js and MongoDB (at the moment) and it just seemed to fit perfectly with what I was trying to achieve. After a week, I’m so glad I made this decision. Modulus’ service is excellent, it’s reliable under load and I found their customer service outstanding; I’m impressed.</p>\n<h2 id=\"building-the-node-app\">Building The Node App</h2>\n<p>I immediately started development with <a href=\"http://expressjs.com/\">Express</a>, a beautifully simple web framework. I used the <a href=\"https://github.com/mongodb/node-mongodb-native\">native MongoDB wrapper for Node</a> over bloated ODM libraries, as I wasn’t doing anything particularly complex with storage. The all-important task scheduling was built with <a href=\"https://github.com/ncb000gt/node-cron\">node-cron</a>.</p>\n<p>I won’t go into too much technical detail here, but what I ended up with was a flow as outlined below. I’m quite pleased with how little manual work is involved:</p>\n<ol>\n<li>Somebody submits a library on the site</li>\n<li>The new library is stored in the database and marked as inactive.</li>\n<li>Every 30 minutes, an email is sent to me outlining any new inactive libraries. Each library has a unique activation link as well as a link for me to look at the library on GitHub.</li>\n<li>When I click on an activation link, the repository details for that library are fetched from GitHub, and it becomes visible on the site.</li>\n<li>From this point on, every 20 minutes, any libraries which have not been updated in the last two days are re-fetched from GitHub. This keeps the stats nice and fresh.</li>\n</ol>\n<p>All of this gives me a lot of flexibility – I can (and do) process new libraries happily on my morning commute!</p>\n<h2 id=\"designing-the-site\">Designing The Site</h2>\n<p>I’m not a designer, as may be evident, so I elected to go with a very simple minimalist design. Afterwards I found out that I’d inadvertently done “Flat Design”, apparently it’s a trend.</p>\n<p>After sending an early version of the site out to some friends for feedback, the talented <a href=\"http://bevanstephens.com/\">Bevan Stephens</a> went above-and-beyond the call of duty and gave me some excellent advice which helped me tighten up the design.</p>\n<h2 id=\"building-the-front-end\">Building The Front-End</h2>\n<p>The last part of the build was the front-end. There’s no client-side JavaScript whatsoever (except some tracking nonsense) so framework-wise that was an easy decision to make.</p>\n<p>In terms of CSS, I used a couple of my own libraries. This is mainly because I wanted to give them a bit of use, and they’re actually well suited to a small website. Also, I’m quite familiar with them!</p>\n<ul>\n<li><a href=\"http://pigeoncss.com/\">Pigeon</a>: <em>“An OOCSS framework for rapid prototyping and building smart, scalable sites”</em></li>\n<li><a href=\"http://fragcss.com/\">Frag</a>: <em>“A fluid, responsive, simple grid system for CSS”</em></li>\n</ul>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>I had a lot of fun building <a href=\"http://cssdb.co/\">CSSDB</a>. As well as being well suited to building performant sites, the technologies I chose are enjoyable to work with.</p>\n<p>All-in-all, I haven’t regretted any of my choices (yet). The site’s remained fast and responsive under a moderate (but increasing) load, and I’m getting a steady flow of submissions.</p>\n<p><!-- raw HTML omitted -->It’s my intention to open-source the code behind the site at some point soon – I’d like to have some more people’s eyes on it and get some community participation going. Before I do that, though, some house-keeping is in order: CSSDB was built over a weekend, with little consideration for maintainability and ease-of-understanding for anyone other than me.<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->The source-code for CSSDB is <a href=\"https://github.com/rowanmanning/cssdb\">available on GitHub</a>.<!-- raw HTML omitted --></p>\n<p>Anyway, I hope you’ve enjoyed my ramblings! Maybe you learned something, or have something to teach me? I’d love to get some feedback on my approach to this build or the site itself.</p>\n<p>Thanks for reading,<br>\nRowan.</p>",
				"image": null,
				"media": [],
				"authors": [
					{
						"name": "Rowan Manning",
						"email": null,
						"url": "https://rowanmanning.com/"
					}
				],
				"categories": [
					{
						"label": "CSS",
						"term": "css",
						"url": "https://rowanmanning.com/tags/css/"
					},
					{
						"label": "JavaScript",
						"term": "javascript",
						"url": "https://rowanmanning.com/tags/javascript/"
					},
					{
						"label": "Node.js",
						"term": "node.js",
						"url": "https://rowanmanning.com/tags/node.js/"
					},
					{
						"label": "Express",
						"term": "express",
						"url": "https://rowanmanning.com/tags/express/"
					}
				]
			},
			{
				"id": "https://rowanmanning.com/posts/jekyll-site-redesign-build/",
				"title": "Jekyll Site Redesign/Build",
				"description": null,
				"url": "https://rowanmanning.com/posts/jekyll-site-redesign-build/",
				"published": "2013-02-11T00:16:00.000Z",
				"updated": "2013-02-11T00:16:00.000Z",
				"content": "<p>It’s been about 9 months since my last site design/refresh, and the code was starting to show it’s age (that’s got to be a separate post – just how quickly standards change). I recently built a couple of small sites with <a href=\"https://jekyllrb.com/\">Jekyll</a> and decided to port by existing blog over to it.</p>\n<p>Jekyll is a beautifully simple static site generator. The ease-of-use with this tool is crazy, I had so much fun with the rewrite just because Jekyll works in exactly the way you’d expect it to.</p>\n<h2 id=\"my-previous-site\">My Previous Site</h2>\n<p>My site was originally built using <a href=\"http://docpad.org/\">DocPad</a>, another static site generator, but where Jekyll comes out on top for me is it’s simplicity. For some people, I’m sure the massive flexibility of DocPad would be a must-have – you can change nearly everything about it – however I’d started to find this more of a hindrance than anything. The complexity of my site was starting to get in the way of me actually publishing anything.</p>\n<p>My second bugbear with my previous site was that I had to generate it locally in order to publish to GitHub Pages. This didn’t seem like an issue at first, but having to keep a source and output branch on GitHub was becoming a pain. Jekyll, on the other hand, is running on GitHub pages allowing me to just make my changes and push once.</p>\n<p>Spurred on by the <a href=\"http://csswizardry.com/2012/12/a-new-css-wizardry/\">success others had with moving to Jekyll</a>, I decided this was the way to go.</p>\n<h2 id=\"transitioning\">Transitioning</h2>\n<p>Luckily, having come from another static site generator, a lot of my content was already in Markdown format. This meant I didn’t have to mess around with outputting from a database, or work with a bunch of generated files.</p>\n<p>As porting blog posts was actually pretty easy, the bulk of the work involved moving my templates and partials from Eco to Liquid. This took a while because I’d customised quite a lot in my previous site to allow nicely formatted dates and the like. All in all, the initial port took a couple of hours.</p>\n<h2 id=\"rebuild\">Rebuild</h2>\n<p>Once I had my site ported over to Jekyll, it was time for a redesign. As is always the case, I’d neglected the code quality of my own site far more than I would any work or freelance project.</p>\n<p>I made the move from LESS to Sass, which I’ve been meaning to do for a while, and have used <abbr title=\"Object-Oriented CSS\">OOCSS</abbr>\n wherever possible. The site’s code is now a much better representation of my abilities (at least for the next month or two…).</p>\n<p>I’m now also using an excellent <a href=\"http://icomoon.io/\">icon font from Icomoon</a>. This has reduced the number of images used for styling to only one – the background noise. I’m really pleased with this! I’d recommend Icomoon to anyone wanting to start out with icon fonts.</p>\n<h2 id=\"open-source\">Open-Source</h2>\n<p>Lastly, I’m a huge lover of open-source; it seemed a bit hypocritical of me to keep my personal site in a private repository as it has been for the last year. I decided to open-source the code to my site, and it’s now <a href=\"https://github.com/rowanmanning/rowanmanning.github.io\">available on GitHub</a>. Feel free to peruse, learn and teach!</p>\n<p>If you spot anything that I’ve missed out, please let me know (or open a pull-request).</p>\n<h2 id=\"your-site\">Your Site?</h2>\n<p>If you’re in need of a small site or blog, I can’t recommend Jekyll enough. Transitioning was relatively simple, it’s very powerful, and can be hosted for free on GitHub!</p>\n<p>Thanks for reading,<br>\nRowan</p>\n<p>For further reading on this subject, see:</p>\n<ul>\n<li><a href=\"https://jekyllrb.com/\">Jekyll documentation</a></li>\n<li><a href=\"https://github.com/rowanmanning/rowanmanning.github.io\">This site on GitHub</a></li>\n</ul>",
				"image": null,
				"media": [],
				"authors": [
					{
						"name": "Rowan Manning",
						"email": null,
						"url": "https://rowanmanning.com/"
					}
				],
				"categories": [
					{
						"label": "Design",
						"term": "design",
						"url": "https://rowanmanning.com/tags/design/"
					},
					{
						"label": "Jekyll",
						"term": "jekyll",
						"url": "https://rowanmanning.com/tags/jekyll/"
					}
				]
			},
			{
				"id": "https://rowanmanning.com/posts/node-cluster-and-express/",
				"title": "Node.js Cluster and Express",
				"description": null,
				"url": "https://rowanmanning.com/posts/node-cluster-and-express/",
				"published": "2013-01-10T20:18:00.000Z",
				"updated": "2013-01-10T20:18:00.000Z",
				"content": "<p>Over the last couple of evenings, I’ve been playing with the <a href=\"http://nodejs.org/api/cluster.html\">Node.js Cluster module</a> and using it to dramatically improve the amount of load Express apps can handle. The results have been amazing.</p>\n<p>The Cluster module is fairly easy to pick up if you’re used to working with Node.js, but I thought I’d blog about my experience – hopefully it will help you either understand or see the benefit of clustering!</p>\n<h2 id=\"what-does-cluster-do\">What Does Cluster Do?</h2>\n<p>Node.js runs in a single thread. While it’s still very fast in most cases, this really doesn’t take advantage of multiple processors if they’re available. The Cluster module allows you to create a small network of separate processes which can share server ports; this gives your Node.js app access to the full power of your server.</p>\n<h2 id=\"learn-by-example\">Learn By Example</h2>\n<p>Let’s build a simple Express application to start with. Then we’ll add clustering. If you’d like to follow along, you’ll need to <a href=\"https://nodejs.org/\">install Node.js</a> 0.10+. This tutorial also assumes a moderate amount of JavaScript, Node.js and <a href=\"http://expressjs.com/\">Express</a> knowledge.</p>\n<p>All of the source code for the application we’re creating here is <a href=\"https://github.com/rowanmanning/learning-express-cluster\">available on GitHub</a>.</p>\n<p>Create a new directory for this tutorial, and add a file called <code>package.json</code> with the following code:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-json\" data-lang=\"json\"><span class=\"line\"><span class=\"cl\"><span class=\"p\">{</span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"learning-express-cluster\"</span><span class=\"p\">,</span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"nt\">\"version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1.0.0\"</span><span class=\"p\">,</span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"nt\">\"dependencies\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n</span></span><span class=\"line\"><span class=\"cl\">        <span class=\"nt\">\"express\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^4\"</span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\">}</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"p\">}</span>\n</span></span></code></pre></div><p>Run <code>npm install</code> from within your project directory, this will install Express. Now we can create a new file, <code>app.js</code>:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Include Express\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'express'</span><span class=\"p\">);</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Create a new Express application\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Add a basic route – index page\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"s1\">'Hello World!'</span><span class=\"p\">);</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"p\">});</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Bind to a port\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">);</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Application running!'</span><span class=\"p\">);</span>\n</span></span></code></pre></div><p>Now we have a basic Express app, you can run it from the command line with <code>node app.js</code>. When you go to http://localhost:3000/, you should see the message “Hello world!” in your browser.</p>\n<p>That’s all well and good, but let’s get down to the point of this post – clustering! It’s surprisingly simple; we’ll update <code>app.js</code> line by line and explain the process.</p>\n<p>First, we add a new line at the very top of the file:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Include the cluster module\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">cluster</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'cluster'</span><span class=\"p\">);</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"p\">...</span>\n</span></span></code></pre></div><p>Now we’re going to add a conditional to <code>app.js</code> which wraps all of our Express application functionality. Update your file to look like this:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Include the cluster module\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"kd\">var</span> <span class=\"nx\">cluster</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'cluster'</span><span class=\"p\">);</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Code to run if we're in the master process\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">cluster</span><span class=\"p\">.</span><span class=\"nx\">isMaster</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\">...</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Code to run if we're in a worker process\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"c1\">// Include Express\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'express'</span><span class=\"p\">);</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"c1\">// Create a new Express application\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"c1\">// Add a basic route – index page\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span>    <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span></span><span class=\"line\"><span class=\"cl\">        <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"s1\">'Hello World!'</span><span class=\"p\">);</span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\">});</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"c1\">// Bind to a port\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span>    <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">);</span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Application running!'</span><span class=\"p\">);</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"p\">}</span>\n</span></span></code></pre></div><p>What we’re doing here is detecting whether the application is being run in the ‘master’ process (the one you start from the command line) or a ‘worker’ process (a process created by the master).</p>\n<p>Your application code can stay pretty much the same, which makes it fairly easy to add clustering to an existing application.</p>\n<p>Let’s write the code for the master process, we’re almost done! Fill out the first half of the conditional to look like this:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"line\"><span class=\"cl\"><span class=\"p\">...</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Code to run if we're in the master process\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">cluster</span><span class=\"p\">.</span><span class=\"nx\">isMaster</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"c1\">// Count the machine's CPUs\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">cpuCount</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'os'</span><span class=\"p\">).</span><span class=\"nx\">cpus</span><span class=\"p\">().</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"c1\">// Create a worker for each CPU\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\"><</span> <span class=\"nx\">cpuCount</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span></span><span class=\"line\"><span class=\"cl\">        <span class=\"nx\">cluster</span><span class=\"p\">.</span><span class=\"nx\">fork</span><span class=\"p\">();</span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"p\">}</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Code to run if we're in a worker process\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"p\">...</span>\n</span></span></code></pre></div><p>All we’re doing above is counting the number of CPUs your machine has, and calling <code>cluster.fork</code> for each. For example, If your machine has four CPUs then <code>cluster.fork</code> will be called four times, creating four new processes.</p>\n<p>The new worker processes we create will run the same <code>app.js</code> JavaScript file as the master, except it will use the code in the <code>else</code> statement. This is obviously because <code>cluster.isMaster</code> is <code>false</code> within a worker.</p>\n<p>If you run <code>node app.js</code> now, nothing will look different. The only thing you’ll notice is that the message “Application running!” will appear more than once in your command line.</p>\n<p>Before we finish up, let’s output the worker ID so you can tell which worker is serving your page each time it loads. Replace the following lines:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"line\"><span class=\"cl\"><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"s1\">'Hello World!'</span><span class=\"p\">);</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"p\">...</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Application running!'</span><span class=\"p\">);</span>\n</span></span></code></pre></div><p>with these:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"line\"><span class=\"cl\"><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"s1\">'Hello from Worker '</span> <span class=\"o\">+</span> <span class=\"nx\">cluster</span><span class=\"p\">.</span><span class=\"nx\">worker</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">);</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"p\">...</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Worker %d running!'</span><span class=\"p\">,</span> <span class=\"nx\">cluster</span><span class=\"p\">.</span><span class=\"nx\">worker</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">);</span>\n</span></span></code></pre></div><p>Now when you run the application, you should see the workers being started in your command line. When you revisit http://localhost:3000/ you should see the message “Hello from Worker X” where X is the ID of the worker serving you.</p>\n<p>Try opening the page in multiple tabs and browsers – you should see varying workers.</p>\n<h2 id=\"the-proof-is-in-the-pudding\">The Proof Is In The Pudding</h2>\n<p>So far, you’ve taken my word for it that clustering is fast. The last thing I’m going to do here is run some benchmarks on the application before and after adding clustering.</p>\n<p>Because the application is so minimal now, I added a long loop to the index route to help illustrate how a clustered application performs better under heavy load.</p>\n<p>Without clustering:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-sh\" data-lang=\"sh\"><span class=\"line\"><span class=\"cl\">$ siege -c100 -t1M http://localhost:3000/\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Transactions:                263 hits</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Availability:                100.00 %</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Elapsed time:                59.50 secs</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Data transferred:            849.99 MB</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Response time:               19.41 secs</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Transaction rate:            4.42 trans/sec</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Throughput:                  14.29 MB/sec</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Concurrency:                 85.79</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Successful transactions:     263</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Failed transactions:         0</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Longest transaction:         34.57</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Shortest transaction:        10.07</span>\n</span></span></code></pre></div><p>With clustering:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-sh\" data-lang=\"sh\"><span class=\"line\"><span class=\"cl\">$ siege -c100 -t1M http://localhost:3000/\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Transactions:                811 hits</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Availability:                100.00 %</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Elapsed time:                59.25 secs</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Data transferred:            2621.08 MB</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Response time:               6.50 secs</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Transaction rate:            13.69 trans/sec</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Throughput:                  44.24 MB/sec</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Concurrency:                 88.96</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Successful transactions:     811</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Failed transactions:         0</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Longest transaction:         16.47</span>\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">#> Shortest transaction:        0.54</span>\n</span></span></code></pre></div><p>I think you’ll agree that that’s a worthwhile performance increase for only a few lines of code 😉</p>\n<h2 id=\"bonus-code-coping-with-death\">Bonus Code: Coping With Death</h2>\n<p>Last but not least, there’s one last thing that would be useful to add to our application. In the (hopefully unlikely) event that one of our worker processes dies, we’ll want to make sure we spawn another; otherwise we could eventually end up just running an empty master process and losing all our requests!</p>\n<p>This is also incredibly easy to do by binding to the cluster ’exit’ event. Add the following code directly beneath the loop which creates our initial workers. It’s fairly self-explanatory:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" class=\"chroma\"><code class=\"language-js\" data-lang=\"js\"><span class=\"line\"><span class=\"cl\"><span class=\"p\">...</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\">// Listen for dying workers\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span><span class=\"nx\">cluster</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'exit'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">worker</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"c1\">// Replace the dead worker,\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span>    <span class=\"c1\">// we're not sentimental\n</span></span></span><span class=\"line\"><span class=\"cl\"><span class=\"c1\"></span>    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Worker %d died :('</span><span class=\"p\">,</span> <span class=\"nx\">worker</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">);</span>\n</span></span><span class=\"line\"><span class=\"cl\">    <span class=\"nx\">cluster</span><span class=\"p\">.</span><span class=\"nx\">fork</span><span class=\"p\">();</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"p\">});</span>\n</span></span><span class=\"line\"><span class=\"cl\">\n</span></span><span class=\"line\"><span class=\"cl\"><span class=\"p\">...</span>\n</span></span></code></pre></div><p>Now we don’t have to worry as much if something goes horribly wrong in one of our workers!</p>\n<p>I hope you enjoyed this tutorial. As mentioned above, you can get a hold of the <a href=\"https://github.com/rowanmanning/learning-express-cluster\">source code for the examples on GitHub</a>. For more information, check out the <a href=\"http://nodejs.org/api/cluster.html\">Node.js Cluster module documentation</a>.</p>\n<p>Thanks for reading.</p>\n<p>For further reading on this subject, see:</p>\n<ul>\n<li><a href=\"http://nodejs.org/api/cluster.html\">Node.js Cluster module documentation</a></li>\n<li><a href=\"http://expressjs.com/\">Express documentation</a></li>\n</ul>",
				"image": null,
				"media": [],
				"authors": [
					{
						"name": "Rowan Manning",
						"email": null,
						"url": "https://rowanmanning.com/"
					}
				],
				"categories": [
					{
						"label": "Node.js",
						"term": "node.js",
						"url": "https://rowanmanning.com/tags/node.js/"
					},
					{
						"label": "JavaScript",
						"term": "javascript",
						"url": "https://rowanmanning.com/tags/javascript/"
					},
					{
						"label": "Express",
						"term": "express",
						"url": "https://rowanmanning.com/tags/express/"
					},
					{
						"label": "Cluster",
						"term": "cluster",
						"url": "https://rowanmanning.com/tags/cluster/"
					}
				]
			},
			{
				"id": "https://rowanmanning.com/posts/the-mixed-blessing-of-ambition/",
				"title": "The Mixed Blessing of Ambition",
				"description": null,
				"url": "https://rowanmanning.com/posts/the-mixed-blessing-of-ambition/",
				"published": "2012-12-04T20:13:00.000Z",
				"updated": "2012-12-04T20:13:00.000Z",
				"content": "<p>I was talking to a friend recently about getting back into game development; he was very enthusiastic about learning to develop JavaScript games and we were discussing where to start. I had one of those moments when you impart some advice to somebody, and afterwards realise that it’s great advice you’ve been ignoring yourself. The advice in this case was: “Don’t be too ambitious here – you may end up killing your enthusiasm”.</p>\n<p>Now I realise this could be read as quite a negative statement; I’m in no way trying to squash ambition entirely – it can be an extremely powerful driving force. Where ambition <em>can</em> have a negative effect is when you’re being over ambitious in an area you’re unfamiliar with.</p>\n<p>Let’s take game development as an example. If you set yourself some <!-- raw HTML omitted -->ridiculous<!-- raw HTML omitted --> stretch goals early on (let’s say a 3D web-based <abbr title=\"Massively Multiplayer Online\">MMO</abbr>\n game) then unless you’re the kind of person who never gives up, your enthusiasm is likely to wane the more small hurdles you have to jump along the way. This kind of project is excellent once you’ve tried (and maybe failed) a few times on smaller things.</p>\n<h2 id=\"a-bit-of-introspection\">A Bit Of Introspection</h2>\n<p>After the aforementioned conversation, I took a look through the ‘Web Projects’ folder on my computer. The ratio of released/dead projects in here swings massively in favour of the latter. There’s a clear pattern too – they are nearly all very big projects which I have made a start on before I’ve tackled some of the smaller issues which ended up getting in the way early on. Despite my seemingly limitless enthusiasm for these projects in the early days, it slowly got eaten away until it was no longer a fun way to spend my spare time.</p>\n<p>The ‘successful’ projects have a pattern too: they’re all small, realistic, and fun. They’ve all been great learning projects and have paved the way for bigger and better things now that I’ve expanded my knowledge.</p>\n<p>My personal take-away here is to remain ambitious, but also keep that side of myself in check. Recognise the pattern, and save some of the bigger projects for later!</p>",
				"image": null,
				"media": [],
				"authors": [
					{
						"name": "Rowan Manning",
						"email": null,
						"url": "https://rowanmanning.com/"
					}
				],
				"categories": []
			},
			{
				"id": "https://rowanmanning.com/posts/how-to-sell-technology/",
				"title": "How to Sell Technology",
				"description": null,
				"url": "https://rowanmanning.com/posts/how-to-sell-technology/",
				"published": "2012-11-10T16:15:00.000Z",
				"updated": "2012-11-10T16:15:00.000Z",
				"content": "<p>I’m going to talk about something which irritates me; you’ll have to forgive me if I descend into a rant at first, but trust me – there’s a point to this!</p>\n<p>The dressing up of technology in advertising doesn’t work for me. I like to know how the product looks, feels and works in as short a time as possible. The same principals apply to web design.</p>\n<h2 id=\"sell-it-to-me\">Sell It To Me</h2>\n<p>Think about what makes you buy a product. For me, I’m attracted to a product if I believe it can make my life easier or more enjoyable in some way (and also if I think it will make me cooler… lol jk). For somebody looking for those qualities, it’s important to see the key features of the product very quickly. A common theme I’m seeing in tech advertising is a little worrying, there’s  no attempt to build a connection between potential customers and the product in question; what I’m seeing is an attempt to appeal to people’s impulse and sense of “cool”.</p>\n<p>I can illustrate this very easily. Look at the following ad for Microsoft Surface, this is one of their launch pieces:</p>\n<figure class=\"embed\">\n\t<iframe\n\t\tclass=\"embed__youtube-video\"\n\t\tsrc=\"https://www.youtube.com/embed/U7UlE-o8DQQ\"\n\t\tframeborder=\"0\"\n\t\tallowtransparency=\"true\"\n\t\tallow=\"fullscreen\"\n\t\ttitle=\"Watch on YouTube\"\n\t></iframe>\n\t<figcaption class=\"embed__caption\">Watch on YouTube</figcaption>\n</figure>\n\n<p>You can also find a similar example with the <a href=\"http://youtu.be/dpzu3HM2CIo\">Surface Teaser</a> and tentatively the <a href=\"http://youtu.be/F5wDYaxjbxg\">Motorola RAZR M Ad</a>.</p>\n<p>What does the Surface advert tell us about the product? The answer is nothing beyond some hardware details – I know it has a keyboard and a touch screen but what can I actually do with it? How will it make my life better?</p>\n<p>As a comparison (don’t stamp me with “Fan-boy” yet), let’s look at the iPad launch ad:</p>\n<figure class=\"embed\">\n\t<iframe\n\t\tclass=\"embed__youtube-video\"\n\t\tsrc=\"https://www.youtube.com/embed/_N3TW_HA-PE\"\n\t\tframeborder=\"0\"\n\t\tallowtransparency=\"true\"\n\t\tallow=\"fullscreen\"\n\t\ttitle=\"Watch on YouTube\"\n\t></iframe>\n\t<figcaption class=\"embed__caption\">Watch on YouTube</figcaption>\n</figure>\n\n<p>I won’t make a list but from only thirty seconds of footage I know an awful lot about what the product actually does! It’s exciting. They haven’t even <em>really</em> focused on the hardware, because that’s not what the customer cares about – the customer cares about functionality.</p>\n<p>There are other product ads that recognise this too – the <a href=\"http://youtu.be/6o0T44_4hb8\">Samsung Galaxy S3</a> and the <a href=\"http://youtu.be/SbXnCQtQTWc\">Nokia Lumia</a>. Notice a pattern? They are letting the product sell itself.</p>\n<p>I’ll pull up one more set of examples before I apply this to web design. Web Browsers aren’t particularly exciting to anyone outside of web development. However, watch this Internet Explorer advertisement and marvel at its ability to spend a whole minute <em>trying</em> to make a browser look cool:</p>\n<figure class=\"embed\">\n\t<iframe\n\t\tclass=\"embed__youtube-video\"\n\t\tsrc=\"https://www.youtube.com/embed/WA8sLsM3McU\"\n\t\tframeborder=\"0\"\n\t\tallowtransparency=\"true\"\n\t\tallow=\"fullscreen\"\n\t\ttitle=\"Watch on YouTube\"\n\t></iframe>\n\t<figcaption class=\"embed__caption\">Watch on YouTube</figcaption>\n</figure>\n\n<p>Then watch even just one of these <a href=\"http://www.youtube.com/user/googlechrome\">Google Chrome commercials</a>. Google have a different strategy here, they stop trying to talk about the browser and look at why and how we use it. They tell some very human stories which don’t try to dress up the product, In fact they avoid making their product the centre of attention at all.</p>\n<h2 id=\"so-how-does-this-apply-to-web-design\">So How Does This Apply To Web Design?</h2>\n<p>The rights, wrongs, and near-atrocities of the highlighted adverts can be applied directly to building websites, particularly when working on a home page or landing page which is supposed to draw potential users/customers in.</p>\n<p>The mistake I see in the Microsoft Surface ads is that they focus far too much on presentation over clear information. We’ve all seen this on the web before – the home page where you’re not able to find the information you need because of an overly distracting visual. In the advertisements from other tablet/phone manufacturers, we’re given a list of features which allow you to see the benefit of the product immediately. When designing a landing page your goal should be to deliver information to the user as quickly and efficiently as possible, not wow them with impressive visuals.</p>\n<p>With the Internet Explorer commercial, to an outsider it may not even be clear what the ad is about. They’ve made the mistake of trying to make a browser look amazing to regular people, many of whom <a href=\"http://youtu.be/o4MwTvtyrUQ\">don’t even know what a browser is</a>. If you’re faced with the problem of promoting a product which is not very easily understandable, then a good way to do this is to tell a story. A story can not only help someone understand an abstract concept, but can also really help them see <em>value</em> in it – they connect with the human element in a story.</p>\n<h2 id=\"to-conclude\">To Conclude</h2>\n<p>So, I probably took quite a long time to get to quite a simple point, but I thought it would be nice to illustrate the importance of user-focused design with a more ‘real-world’ example (and vent a little of my personal frustration).</p>\n<p>Next time you’re working on a design (or anything else targeted at customers for that matter), remember to think about the information they need before you think about ways to make your product look ‘hip’ and ‘cool’. They will thank you for it, and I won’t rant about it ☺️</p>",
				"image": null,
				"media": [],
				"authors": [
					{
						"name": "Rowan Manning",
						"email": null,
						"url": "https://rowanmanning.com/"
					}
				],
				"categories": []
			},
			{
				"id": "https://rowanmanning.com/posts/why-another-css-grid/",
				"title": "Why I Built Another CSS Grid",
				"description": null,
				"url": "https://rowanmanning.com/posts/why-another-css-grid/",
				"published": "2012-07-24T21:34:00.000Z",
				"updated": "2012-07-24T21:34:00.000Z",
				"content": "<p>A couple of months ago, I decided to set about building a CSS grid system. I realise that I’ve entered a wildly bloated landscape here (you can’t move on the web for fancy new grid systems) but I had my reasons. I’d like to talk about why I built a grid system, and why (maybe) you should too.</p>\n<h2 id=\"my-problem\">My Problem</h2>\n<p>When my website went through its last rebuild, I realised that there was no way I could get by without some kind of grid. I wrote down a couple of requirements that I had:</p>\n<ul>\n<li>Fluidity - fixed-width layouts don’t do it for me.</li>\n<li>Responsivity - I don’t think it’s sensible to not provide at least a basic mobile-optimised view.</li>\n<li>IE7 support - a contentious one, I know, but I want at least a sensible looking page in older browsers.</li>\n</ul>\n<p>With these requirements in mind, I decided to have a look at what was available. It didn’t take me long to realise that there are a million projects out there; a split between massively overcomplicated frameworks which try to <a href=\"http://www.rachelandrew.co.uk/archives/2012/03/21/stop-solving-problems-you-dont-yet-have/\">solve every problem in the world</a> and neat little <a href=\"http://1kbgrid.com/\">micro-grids</a>. While there were some really great libraries, none of them felt quite right for me – I’m hard to please.</p>\n<h2 id=\"building\">Building</h2>\n<p>What surprised me is how quickly I ended up with a good working (IE 6+) prototype. Not only was it fast, but I had a lot of fun!</p>\n<p>After a couple of hours spent tweaking and testing, I <a href=\"http://fragcss.com/\">ended up with Frag</a>. It’s not perfect, it’s not extremely feature-rich, but it does exactly the job I need it to do.</p>\n\n\n<figure class=\"image\">\n\t<a href=\"http://fragcss.com/\">\n\t\t<img\n\t\t\t\n\t\t\t\tsrcset=\"\n\t\t\t\t\thttps://rowanmanning.com/posts/why-another-css-grid/frag-website-screengrab.jpg,\n\t\t\t\t\thttps://rowanmanning.com/posts/why-another-css-grid/frag-website-screengrab.jpg 1.5x,\n\t\t\t\t\thttps://rowanmanning.com/posts/why-another-css-grid/frag-website-screengrab.jpg 2x\n\t\t\t\t\"\n\t\t\t\n\t\t\tsrc=\"https://rowanmanning.com/posts/why-another-css-grid/frag-website-screengrab.jpg\"\n\t\t\talt=\"A screen-grab of the Frag website\"\n\t\t\twidth=\"600\"\n\t\t\theight=\"299\"\n\t\t\tloading=\"lazy\"\n\t\t/>\n\t</a>\n\t\n</figure>\n\n<h2 id=\"so-why-build-your-own\">So Why Build Your Own?</h2>\n<p>I’m not advocating rolling your own in every situation, but there are a lot of benefits to spending a little time on your own solution to a problem:</p>\n<dl>\n<dt>Learning</dt>\n<dd>I learnt a lot in the process of building Frag, particularly about <a href=\"https://developer.mozilla.org/en/CSS/Media_queries/\">CSS3 media queries</a>. I don’t know about you, but I love to learn; throwing yourself into a problem is nearly always the best way to do this.</dd>\n<dt>Understanding</dt>\n<dd>The benefit of understanding the code you’re using inside out is massive. There’s nearly always an overhead when learning how to use third-party software. Sometimes, for simple things, this is avoidable by building it yourself.</dd>\n<dt>Giving Back</dt>\n<dd>Whether or not you expect anyone to use it, you can get a pretty good feeling from releasing open-source software. You might help someone out with a project or with learning a new technology. This is awesome!</dd>\n</dl>\n<p>If you do end up building something great as a result of this post, I’d be really interested to take a look: tweet it at me!</p>\n<p>And if you don’t fancy building your own grid system, you could always <a href=\"http://fragcss.com/\">use Frag</a> 😉</p>",
				"image": {
					"url": "https://rowanmanning.com/posts/why-another-css-grid/frag-website-screengrab.jpg",
					"title": "A screen-grab of the Frag website"
				},
				"media": [
					{
						"url": "https://rowanmanning.com/posts/why-another-css-grid/frag-website-screengrab.jpg",
						"image": "https://rowanmanning.com/posts/why-another-css-grid/frag-website-screengrab.jpg",
						"title": "A screen-grab of the Frag website",
						"length": null,
						"type": "image",
						"mimeType": "image/jpeg"
					}
				],
				"authors": [
					{
						"name": "Rowan Manning",
						"email": null,
						"url": "https://rowanmanning.com/"
					}
				],
				"categories": [
					{
						"label": "CSS",
						"term": "css",
						"url": "https://rowanmanning.com/tags/css/"
					}
				]
			},
			{
				"id": "https://rowanmanning.com/posts/accessibility-beyond-the-screen-reader/",
				"title": "Accessibility: Beyond the Screen-Reader",
				"description": null,
				"url": "https://rowanmanning.com/posts/accessibility-beyond-the-screen-reader/",
				"published": "2012-06-19T21:05:00.000Z",
				"updated": "2012-06-19T21:05:00.000Z",
				"content": "<p>I’d like to begin this post with a disclaimer: I’m not an accessibility expert. In fact, web accessibility scares me; it’s that daunting consideration when kicking off a web project that can send shivers down the spines of the hardiest developers. Luckily, us web folk love a challenge!</p>\n<p>The purpose of this post is to talk about the common misunderstanding that accessibility means catering for blind people almost exclusively. I’ve found myself frustrated by “accessibility tunnel-vision” on a number of occasions recently which has inspired me to explain <em>my</em> understanding of web accessibility. Who exactly are we trying to cater for? We’ll start with the obvious:</p>\n<h2 id=\"blind-or-partially-sighted-users\">Blind Or Partially Sighted Users</h2>\n<p>This is the user that we tend to jump to when accessibility is mentioned. These users may rely completely on assistive technology, such as a screen-reader, to access the web. Partially sighted or vision-impaired users may not rely on a screen-reader, but will find it difficult to read content if the type is too small or cannot be zoomed.</p>\n<p>There are a wealth of resources available to help make our websites work well for this group. In order to achieve a basic level of support, it helps to ensure that your website is usable in a <a href=\"http://lynx.browser.org/\" title=\"The Lynx Browser\">text-based browser such as Lynx</a> – writing sensible, semantic markup is a first step. I also can’t emphasise what an eye-opener it is to <a href=\"http://webaim.org/articles/screenreader_testing/\" title=\"Testing with Screen Readers: Questions and Answers\">try and use a screen-reader yourself</a>.</p>\n<p>Vision impaired users can be catered for by keeping your type sizes sensible (personal preference: <code>>=16px</code>), and ensuring that your content is zoomable. You’ll make this a lot easier by using a scalable font measurement in your CSS such as <code>em</code> or <code>rem</code>.</p>\n<h2 id=\"colour-blind-users\">Colour-Blind Users</h2>\n<p>Colour-blind users may find it hard to distinguish between elements on a page if they are similar in colour. This can become a problem when the contrast between two elements is important; for example, between your website text and background. People with even mild colour-blindness may find it difficult to read content.</p>\n<p>When it comes to catering for colour-blind users, subtlety becomes your enemy; there are some great <a href=\"http://snook.ca/technical/colour_contrast/colour.html\" title=\"Colour Contrast Checking Tool\">contrast checking tools online</a> which can help you immensely.</p>\n<h2 id=\"users-with-physical-disabilities\">Users With Physical Disabilities</h2>\n<p>Physical disabilities can encompass anything from minor impairments of motor-skills to paralysis. Motor impairments are common in elderly web users who may rely on a keyboard alone to browse the web – using a mouse requires small, precise hand movements.</p>\n<p>Ensuring that your website is keyboard-accessible is important, it’s also quite easy to test: unplug your mouse! There are quite a few resources around the web on this topic, and <a href=\"http://www.456bereastreet.com/archive/201104/keyboard_accessibility_again/\" title=\"Some useful quick-tips on keyboard accessibility\">fixing up your website for keyboard users</a> is actually relatively easy.</p>\n<h2 id=\"users-with-cognitive-disabilities\">Users With Cognitive Disabilities</h2>\n<p>Cognitive disabilities get little air-time in my opinion, yet conditions such as dyslexia are extremely common. The diversity of this group is huge, and cognitive disabilities can have an adverse effect on memory; problem solving; attention; and reading, linguistic and verbal comprehension to name a few:</p>\n<dl>\n<dt>Memory</dt>\n<dd>Some users may have difficulties with their long, mid or short-term memories. This can be an issue when moving through a stepped sign-up or purchasing process for example. Clear sign-posting and guidance is essential for these users.</dd>\n<dt>Problem solving</dt>\n<dd>For users who have trouble problem-solving, things like form errors or unclear instructions are a nightmare. Instructions should be clear and large changes to the page should be explained to the user.</dd>\n<dt>Attention</dt>\n<dd>Users with conditions such as <abbr title=\"Attention Deficit Hyperactivity Disorder\">ADHD</abbr>\n often struggle to maintain concentration when completing a task. Avoiding background noise on a page and using visual cues to highlight important content helps these users.</dd>\n<dt>Reading, linguistic and verbal comprehension</dt>\n<dd>This broad category ranges from problems understanding long or complex words and sentence structure, to difficulty processing non-literal text such as sarcasm, metaphor or slang. Clear document structure, supplemental media and uncomplicated writing can help these users a lot.</dd>\n</dl>\n<p>For more information, I can’t recommend this <a href=\"http://webaim.org/articles/cognitive/\" title=\"In-depth article on cognitive disabilities and the web\">article on cognitive disabilities</a> enough. It goes into far more depth than I could on the subject!</p>\n<h2 id=\"to-conclude\">To Conclude</h2>\n<p>So I hope I haven’t made accessibility an even scarier word for you! Granted there’s a lot to consider, and accessibility can seem like a bit of a minefield, but building accessible websites can be an extremely rewarding endeavour.</p>\n<p>By thinking about these users while you build, not only will you help people with disabilities, but many of the relatively small improvements listed in this post will make your site more usable for <em>everyone</em>.</p>\n<p>Thanks for reading,<br>\nRowan</p>\n<p>For further reading on this subject, see:</p>\n<ul>\n<li><a href=\"http://webaim.org/articles/\">Accessibility articles from WebAIM</a></li>\n<li><a href=\"http://www.bbc.co.uk/accessibility/guides/\">The BBC’s web accessibility guides</a></li>\n<li><a href=\"http://filamentgroup.com/dwpe/\">Designing with Progressive Enhancement</a>, a book by Filament Group</li>\n</ul>",
				"image": null,
				"media": [],
				"authors": [
					{
						"name": "Rowan Manning",
						"email": null,
						"url": "https://rowanmanning.com/"
					}
				],
				"categories": [
					{
						"label": "Accessibility",
						"term": "accessibility",
						"url": "https://rowanmanning.com/tags/accessibility/"
					}
				]
			}
		]
	}
}